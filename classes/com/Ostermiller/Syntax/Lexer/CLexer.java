/* The following code was generated by JFlex 1.3.5 on 2/11/02 11:16 AM */

/* CLexer.java is a generated file.  You probably want to
 * edit CLexer.lex to make changes.  Use JFlex to generate it.
 * To generate CLexer.java
 * Install <a href="http://jflex.de/">JFlex</a> v1.3.2 or later.
 * Once JFlex is in your classpath run<br>
 * <code>java JFlex.Main CLexer.lex</code><br>
 * You will then have a file called CLexer.java
 */

/*
 * This file is part of a <a href="http://ostermiller.org/syntax/">syntax
 * highlighting</a> package.
 * Copyright (C) 1999-2002 Stephen Ostermiller <syntax@ostermiller.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * See COPYING.TXT for details.
 */

package com.Ostermiller.Syntax.Lexer;

import java.io.*;

/** 
 * CLexer is a c language lexer.  Created with JFlex.  An example of how it is used:
 *  <CODE>
 *  <PRE>
 *  CLexer shredder = new CLexer(System.in);
 *  CToken t;
 *  while ((t = shredder.getNextToken()) != null){
 *      System.out.println(t);
 *  }
 *  </PRE>
 *  </CODE>
 * 
 * @see CToken
 */ 


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 2/11/02 11:16 AM from the specification file
 * <tt>file:/home/steveo/personal/projects/java/com/Ostermiller/Syntax/Lexer/CLexer.lex</tt>
 */
public class CLexer implements Lexer {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int PREPROCESSOR = 2;
  final public static int YYINITIAL = 0;
  final public static int MIDDLE_OF_LINE = 1;

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 26, 28,  0, 26, 27,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    26, 17, 38,  1, 39, 29, 63, 11,  5,  7, 40, 44, 61, 19, 47,  9, 
    23, 24, 24, 24, 22, 22, 22, 22, 21, 21, 62, 60, 13,  3, 15,  2, 
     0, 20, 20, 20, 20, 45, 46, 25, 25, 25, 25, 25, 41, 25, 25, 25, 
    25, 25, 25, 25, 25, 42, 25, 25, 30, 25, 25,  4,  8,  6, 10, 54, 
     0, 31, 32, 49, 52, 53, 33, 57, 67, 48, 25, 64, 50, 58, 34, 59, 
    56, 25, 35, 55, 36, 51, 37, 66, 43, 68, 65, 12, 16, 14, 18,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    69,   138,   207,   276,   345,   414,   483,   483,   483, 
      483,   552,   621,   690,   483,   759,   483,   828,   897,   966, 
      483,  1035,  1104,  1173,  1242,  1311,  1380,  1449,  1518,  1587, 
     1656,  1725,  1794,  1863,  1932,  2001,  2070,  2139,  2208,  2277, 
     2346,  2415,  2484,  2553,  2622,  2691,  2760,  2829,  2898,  2967, 
      483,   483,   483,  3036,  3105,  3174,  3243,  3312,  3381,  3450, 
     3519,  3588,  3657,  3726,  3795,  3864,  3933,  4002,  4071,  4140, 
     4209,  4278,  4347,   483,   483,  4416,  4485,   483,  4554,  4623, 
     4692,   483,   483,  4761,   483,  4830,  4899,   483,   483,   483, 
      483,   483,   483,  4968,  5037,  5106,  5175,  5244,  5313,  5382, 
     5451,  5520,   483,  5589,  5658,  5727,  5796,  5865,  5934,  6003, 
     6072,  6141,  6210,  6279,  6348,  6417,  6486,  6555,  6624,  6693, 
      483,   483,   483,   483,  6762,  1104,  6831,  6900,  6969,  7038, 
     7107,  7176,  7245,  7314,  7383,  7452,  7521,  7590,  7659,  7728, 
     7797,  7866,  7935,  8004,  8073,  8142,  8211,  8280,  8349,   483, 
      483,  8418,  8487,  8556,  8625,  8694,  8763,  8832,  8901,  8970, 
     9039,  9108,  9177,  9246,  9315,  9384,  9453,  9522,  9591,  9660, 
     9729,  9798,  9867,  9936, 10005, 10074, 10143, 10212, 10281,   483, 
    10350, 10419, 10488, 10557, 10626,   483,   483, 10695, 10764,  4968, 
    10833, 10902,  4968, 10971, 11040, 11109, 11178, 11247, 11316, 11385, 
    11454,  1104, 11523,  1104, 11592, 11661, 11730,  1104, 11799, 11868, 
    11937, 12006, 12075, 12144, 12213, 12282, 12351, 12420, 12489, 12558, 
      483, 12627,  1104, 12696, 12765, 12834, 12903, 12972, 13041, 13110, 
    13179, 13248, 13317, 13386, 13455, 13524, 13593, 13662, 13731, 13800, 
    13869, 13938, 14007, 14076, 14145, 14214, 14283, 14352, 14421, 14490, 
    14559, 14628, 14697, 14766, 14835, 14904, 14973, 15042, 15111, 15180, 
    15249, 15318, 15387, 15456, 15525, 15594, 15663, 15732, 15801, 15870, 
    15939, 16008, 16077, 16146,   483, 16215, 16284, 16353, 16422, 16491, 
    16560,  4968, 16629, 16698,  1104, 16767,  1104, 16836, 16905, 16974, 
    17043, 17112, 17181, 17250,  1104, 17319, 17388,  1104, 17457, 17526, 
      483, 17595, 17664, 17733, 17802, 17871,  1104, 17940, 18009, 18078, 
     1104,  1104, 18147, 18216, 18285, 18354, 18423, 18492,  1104, 18561, 
     1104, 18630, 18699, 18768, 18837, 18906, 18975, 19044, 19113, 19182, 
     1104, 19251, 19320, 19389, 19458,   483, 19527, 19596, 19665, 19734, 
    19803, 19872, 19941, 20010, 20079, 20148, 20217, 20286,   483, 20355, 
    20424, 20493,  4968,  1104, 20562,  1104, 20631, 20700, 20769, 20838, 
    20907, 20976, 21045, 21114, 21183, 21252, 21321, 21390,  1104,  1104, 
    21459, 21528,  1104, 21597, 21666, 21735, 21804, 21873, 21942, 22011, 
    22080, 22149, 22218, 22287,  1104, 22356, 22425, 22494, 22563, 22632, 
    22701,  1104, 22770, 22839, 22908, 22977, 23046, 23115, 10143,  1104, 
    23184,  1104, 23253, 23322, 23391, 23460, 23529, 23598, 23667, 23736, 
     1104, 23805, 23874, 23943, 24012,  1104,  1104, 24081,  1104, 24150, 
     1104,  1104,  1104,  1104, 24219, 24288,  1104, 24357, 24426, 24495, 
    24564, 24633, 24702, 24771, 24840, 24909,  1104,  1104, 24978, 25047, 
    25116, 25185,  1104, 25254, 25323,  1104, 25392,  1104, 25461, 25530, 
    25599, 25668,  1104,  1104,  1104,  1104, 25737,  1104, 25806, 25875, 
    25944,  1104,  1104,  1104, 26013, 26082, 26151, 26220,  1104, 26289, 
     1104, 26358, 26427, 26496, 26565,  1104, 26634,  1104, 26703, 26772, 
    26841,  1104
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\4\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\2\30\1\31\1\30"+
    "\1\27\1\32\2\33\1\34\1\27\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\4\1\45\3\27"+
    "\1\46\2\27\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\27\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\2\27\1\67\2\27\2\4\1\70"+
    "\1\7\1\10\1\11\1\12\1\13\1\4\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\2\30\1\31\1\30\1\27\1\32\2\33"+
    "\1\34\1\27\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\4\1\45\3\27\1\46\2\27\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\27\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\2\27\1\67\2\27\2\71\1\72\5\71\1\73\1\74"+
    "\20\71\1\75\2\33\50\71\2\4\1\76\5\0\1\4"+
    "\13\0\6\4\4\0\10\4\1\0\1\4\1\0\3\4"+
    "\1\0\2\4\1\0\14\4\4\0\5\4\2\77\1\100"+
    "\5\101\1\4\1\0\12\101\6\77\1\102\2\0\1\101"+
    "\10\77\1\101\1\77\1\101\3\77\1\101\2\77\1\101"+
    "\1\103\1\77\1\104\1\105\1\106\1\107\2\77\1\110"+
    "\3\77\4\101\5\77\2\0\1\111\105\0\1\112\211\0"+
    "\1\113\5\0\1\114\36\0\1\115\37\0\1\116\101\0"+
    "\2\117\1\120\5\117\1\121\2\117\1\122\17\117\2\0"+
    "\50\117\3\0\1\123\11\0\1\124\72\0\1\125\13\0"+
    "\1\126\67\0\1\127\1\130\14\0\1\131\67\0\1\132"+
    "\104\0\1\133\13\0\1\134\3\0\1\135\61\0\2\4"+
    "\1\76\5\0\1\4\13\0\6\27\4\0\10\27\1\0"+
    "\1\27\1\0\3\27\1\0\2\27\1\0\14\27\4\0"+
    "\5\27\2\136\1\137\5\0\1\136\13\0\1\136\4\30"+
    "\1\136\4\0\10\136\1\0\1\136\1\0\1\140\1\141"+
    "\1\136\1\0\1\142\1\136\1\143\2\136\1\140\1\141"+
    "\1\136\1\142\6\136\4\0\7\136\1\137\5\0\1\136"+
    "\13\0\1\136\1\144\3\145\1\136\4\0\1\146\7\136"+
    "\1\0\1\136\1\0\1\140\1\141\1\146\1\0\1\142"+
    "\1\136\1\143\2\136\1\140\1\141\1\136\1\142\6\136"+
    "\4\0\5\136\32\0\1\32\2\33\102\0\3\33\53\0"+
    "\1\147\101\0\2\4\1\76\5\0\1\4\13\0\6\27"+
    "\4\0\10\27\1\0\1\27\1\0\3\27\1\0\2\27"+
    "\1\0\3\27\1\150\10\27\4\0\5\27\2\4\1\76"+
    "\5\0\1\4\13\0\6\27\4\0\5\27\1\151\2\27"+
    "\1\0\1\27\1\0\3\27\1\0\2\27\1\0\13\27"+
    "\1\152\4\0\5\27\2\4\1\76\5\0\1\4\13\0"+
    "\6\27\4\0\5\27\1\153\2\27\1\0\1\27\1\0"+
    "\3\27\1\0\2\27\1\0\2\27\1\154\10\27\1\155"+
    "\4\0\5\27\2\4\1\76\5\0\1\4\13\0\6\27"+
    "\4\0\1\27\1\156\6\27\1\0\1\27\1\0\3\27"+
    "\1\0\2\27\1\0\5\27\1\157\6\27\4\0\5\27"+
    "\2\4\1\76\5\0\1\4\13\0\6\27\4\0\10\27"+
    "\1\0\1\27\1\0\3\27\1\0\2\27\1\0\5\27"+
    "\1\160\6\27\4\0\5\27\2\4\1\76\5\0\1\4"+
    "\13\0\6\27\4\0\5\27\1\161\2\27\1\0\1\27"+
    "\1\0\3\27\1\0\2\27\1\0\5\27\1\162\6\27"+
    "\4\0\3\27\1\163\1\164\2\4\1\76\5\0\1\4"+
    "\13\0\6\27\4\0\10\27\1\0\1\27\1\0\3\27"+
    "\1\0\2\27\1\0\1\165\12\27\1\166\4\0\5\27"+
    "\2\44\1\167\5\44\1\170\22\44\2\0\11\44\1\171"+
    "\36\44\3\0\1\172\104\0\1\173\50\0\1\174\55\0"+
    "\4\175\54\0\2\4\1\76\5\0\1\4\13\0\6\27"+
    "\4\0\3\27\1\176\1\177\3\27\1\0\1\27\1\0"+
    "\3\27\1\0\2\27\1\0\14\27\4\0\5\27\2\4"+
    "\1\76\5\0\1\4\13\0\6\27\4\0\1\27\1\200"+
    "\6\27\1\0\1\27\1\0\3\27\1\0\2\27\1\0"+
    "\2\27\1\201\10\27\1\202\4\0\3\27\1\203\1\27"+
    "\2\4\1\76\5\0\1\4\13\0\6\27\4\0\10\27"+
    "\1\0\1\27\1\0\3\27\1\0\2\27\1\0\13\27"+
    "\1\204\4\0\5\27\2\4\1\76\5\0\1\4\13\0"+
    "\6\27\4\0\4\27\1\205\3\27\1\0\1\27\1\0"+
    "\3\27\1\0\2\27\1\0\14\27\4\0\5\27\2\4"+
    "\1\76\5\0\1\4\13\0\6\27\4\0\10\27\1\0"+
    "\1\27\1\0\3\27\1\0\2\27\1\0\5\27\1\206"+
    "\5\27\1\207\4\0\4\27\1\210\2\4\1\76\5\0"+
    "\1\4\13\0\6\27\4\0\4\27\1\211\3\27\1\0"+
    "\1\27\1\0\2\27\1\212\1\0\2\27\1\0\2\27"+
    "\1\213\11\27\4\0\5\27\2\4\1\76\5\0\1\4"+
    "\13\0\6\27\4\0\6\27\1\214\1\27\1\0\1\27"+
    "\1\0\3\27\1\0\2\27\1\0\1\215\13\27\4\0"+
    "\2\27\1\216\1\217\1\27\2\4\1\76\5\0\1\4"+
    "\13\0\6\27\4\0\5\27\1\220\2\27\1\0\1\27"+
    "\1\0\3\27\1\0\2\27\1\0\3\27\1\221\10\27"+
    "\4\0\5\27\2\4\1\76\5\0\1\4\13\0\6\27"+
    "\4\0\10\27\1\0\1\27\1\0\3\27\1\0\2\27"+
    "\1\0\13\27\1\222\4\0\5\27\2\4\1\76\5\0"+
    "\1\4\13\0\6\27\4\0\10\27\1\0\1\27\1\0"+
    "\3\27\1\0\2\27\1\0\3\27\1\223\10\27\4\0"+
    "\5\27\2\4\1\76\5\0\1\4\13\0\6\27\4\0"+
    "\7\27\1\224\1\0\1\27\1\0\3\27\1\0\2\27"+
    "\1\0\10\27\1\225\3\27\4\0\5\27\3\0\1\226"+
    "\73\0\1\227\5\0\2\4\1\76\5\0\1\4\13\0"+
    "\6\27\4\0\10\27\1\0\1\27\1\0\3\27\1\0"+
    "\2\27\1\0\14\27\4\0\3\27\1\230\1\27\2\0"+
    "\1\231\102\0\2\71\1\72\5\71\1\73\1\232\21\71"+
    "\2\0\52\71\1\233\5\71\1\73\1\232\21\71\2\0"+
    "\52\71\1\72\5\71\1\73\1\232\21\71\1\234\53\71"+
    "\1\72\5\71\1\73\1\114\21\71\2\0\13\71\1\235"+
    "\36\71\1\72\5\71\1\73\1\232\20\71\1\75\2\33"+
    "\50\71\2\0\1\236\102\0\2\77\1\100\5\101\1\4"+
    "\1\0\12\101\6\77\3\0\1\101\10\77\1\101\1\77"+
    "\1\101\3\77\1\101\2\77\1\101\14\77\4\101\5\77"+
    "\2\101\1\237\5\101\2\0\20\101\3\0\60\101\2\0"+
    "\20\101\3\0\60\101\2\0\20\101\1\102\2\0\23\101"+
    "\1\240\1\101\1\241\1\242\1\243\1\244\2\101\1\245"+
    "\14\101\2\77\1\100\5\101\1\4\1\0\12\101\6\77"+
    "\3\0\1\101\3\77\1\246\1\247\3\77\1\101\1\77"+
    "\1\101\3\77\1\101\2\77\1\101\14\77\4\101\7\77"+
    "\1\100\5\101\1\4\1\0\12\101\6\77\3\0\1\101"+
    "\10\77\1\101\1\77\1\101\3\77\1\101\2\77\1\101"+
    "\1\250\13\77\4\101\7\77\1\100\5\101\1\4\1\0"+
    "\12\101\6\77\3\0\1\101\4\77\1\251\3\77\1\101"+
    "\1\77\1\101\3\77\1\101\2\77\1\101\14\77\4\101"+
    "\7\77\1\100\5\101\1\4\1\0\12\101\6\77\3\0"+
    "\1\101\10\77\1\101\1\77\1\101\3\77\1\101\2\77"+
    "\1\101\5\77\1\252\6\77\4\101\7\77\1\100\5\101"+
    "\1\4\1\0\12\101\6\77\3\0\1\101\4\77\1\253"+
    "\1\254\2\77\1\101\1\77\1\101\3\77\1\101\2\77"+
    "\1\101\2\77\1\255\11\77\4\101\7\77\1\100\5\101"+
    "\1\4\1\0\12\101\6\77\3\0\1\101\5\77\1\256"+
    "\2\77\1\101\1\77\1\101\3\77\1\101\2\77\1\101"+
    "\14\77\4\101\5\77\3\0\1\5\1\0\1\10\1\0"+
    "\1\12\1\0\1\4\1\0\1\15\1\0\1\17\1\0"+
    "\1\21\1\0\1\23\1\0\1\25\61\0\33\114\2\0"+
    "\50\114\50\257\1\260\34\257\2\261\1\262\5\261\1\263"+
    "\2\261\1\264\17\261\2\0\52\261\1\265\5\261\1\263"+
    "\2\261\1\264\17\261\2\0\52\261\1\266\5\261\1\117"+
    "\2\261\1\117\4\261\1\267\5\261\1\270\2\271\2\261"+
    "\2\0\1\261\1\267\10\117\4\261\1\267\31\261\3\0"+
    "\1\272\104\0\1\273\103\0\1\274\102\0\2\136\1\137"+
    "\5\0\1\136\13\0\6\136\4\0\10\136\1\0\1\136"+
    "\1\0\3\136\1\0\17\136\4\0\5\136\2\0\1\275"+
    "\102\0\2\136\1\137\5\0\1\136\13\0\6\136\4\0"+
    "\10\136\1\0\1\136\1\0\1\136\1\276\1\136\1\0"+
    "\6\136\1\276\10\136\4\0\7\136\1\137\5\0\1\136"+
    "\13\0\6\136\4\0\10\136\1\0\1\136\1\0\1\276"+
    "\2\136\1\0\5\136\1\276\11\136\4\0\7\136\1\137"+
    "\5\0\1\136\12\0\1\277\1\136\4\300\1\136\4\0"+
    "\10\136\1\0\1\136\1\0\3\136\1\277\17\136\4\0"+
    "\7\136\1\137\5\0\1\136\13\0\1\136\4\143\1\136"+
    "\4\0\3\136\1\301\4\136\1\0\1\136\1\0\1\301"+
    "\2\136\1\0\1\142\1\301\3\136\1\301\2\136\1\142"+
    "\6\136\4\0\7\136\1\137\5\0\1\136\13\0\1\136"+
    "\4\144\1\136\4\0\10\136\1\0\1\136\1\0\3\136"+
    "\1\0\1\142\1\136\1\143\5\136\1\142\6\136\4\0"+
    "\7\136\1\137\5\0\1\136\13\0\1\136\1\144\3\145"+
    "\1\136\4\0\10\136\1\0\1\136\1\0\1\302\1\303"+
    "\1\136\1\0\1\142\1\136\1\143\2\136\1\302\1\303"+
    "\1\136\1\142\6\136\4\0\7\136\1\137\5\0\1\136"+
    "\13\0\5\304\1\136\4\0\1\136\3\304\4\136\1\0"+
    "\1\136\1\0\3\136\1\0\2\304\2\136\1\304\2\136"+
    "\2\304\6\136\4\0\5\136\2\4\1\76\5\0\1\4"+
    "\13\0\6\27\4\0\6\27\1\305\1\27\1\0\1\27"+
    "\1\0\3\27\1\0\2\27\1\0\14\27\4\0\5\27"+
    "\2\4\1\76\5\0\1\4\13\0\6\27\4\0\10\27"+
    "\1\0\1\27\1\0\3\27\1\0\2\27\1\0\5\27"+
    "\1\306\6\27\4\0\5\27\2\4\1\76\5\0\1\4"+
    "\13\0\6\27\4\0\10\27\1\0\1\27\1\0\3\27"+
    "\1\0\2\27\1\0\13\27\1\307\4\0\5\27\2\4"+
    "\1\76\5\0\1\4\13\0\6\27\4\0\10\27\1\0"+
    "\1\27\1\0\3\27\1\0\2\27\1\0\1\310\13\27"+
    "\4\0\5\27\2\4\1\76\5\0\1\4\13\0\6\27"+
    "\4\0\10\27\1\0\1\27\1\0\3\27\1\0\2\27"+
    "\1\0\13\27\1\311\4\0\5\27\2\4\1\76\5\0"+
    "\1\4\13\0\6\27\4\0\5\27\1\312\2\27\1\0"+
    "\1\27\1\0\3\27\1\0\2\27\1\0\14\27\4\0"+
    "\5\27\2\4\1\76\5\0\1\4\13\0\6\27\4\0"+
    "\10\27\1\0\1\27\1\0\3\27\1\0\2\27\1\0"+
    "\12\27\1\313\1\27\4\0\5\27\2\4\1\76\5\0"+
    "\1\4\13\0\6\27\4\0\10\27\1\0\1\27\1\0"+
    "\3\27\1\0\2\27\1\0\14\27\4\0\2\27\1\314"+
    "\2\27\2\4\1\76\5\0\1\4\13\0\6\27\4\0"+
    "\6\27\1\315\1\27\1\0\1\27\1\0\3\27\1\0"+
    "\2\27\1\0\1\316\10\27\1\317\2\27\4\0\5\27"+
    "\2\4\1\76\5\0\1\4\13\0\6\27\4\0\10\27"+
    "\1\0\1\27\1\0\3\27\1\0\2\27\1\0\14\27"+
    "\4\0\4\27\1\320\2\4\1\76\5\0\1\4\13\0"+
    "\6\27\4\0\10\27\1\0\1\27\1\0\3\27\1\0"+
    "\2\27\1\0\12\27\1\321\1\27\4\0\5\27\2\4"+
    "\1\76\5\0\1\4\13\0\6\27\4\0\10\27\1\0"+
    "\1\27\1\0\3\27\1\0\2\27\1\0\1\322\13\27"+
    "\4\0\5\27\2\4\1\76\5\0\1\4\13\0\6\27"+
    "\4\0\10\27\1\0\1\27\1\0\3\27\1\0\2\27"+
    "\1\0\10\27\1\323\3\27\4\0\5\27\2\4\1\76"+
    "\5\0\1\4\13\0\6\27\4\0\5\27\1\324\2\27"+
    "\1\0\1\27\1\0\3\27\1\0\2\27\1\0\14\27"+
    "\4\0\5\27\2\4\1\76\5\0\1\4\13\0\6\27"+
    "\4\0\10\27\1\0\1\27\1\0\3\27\1\0\2\27"+
    "\1\0\1\325\1\27\1\326\11\27\4\0\5\27\2\44"+
    "\1\327\5\44\1\330\22\44\2\0\11\44\1\171\36\44"+
    "\2\331\1\44\5\331\1\44\2\331\1\44\4\331\1\332"+
    "\5\331\3\44\2\331\1\333\1\334\1\331\1\332\7\44"+
    "\1\334\4\331\1\332\31\331\25\0\4\175\10\0\1\335"+
    "\7\0\1\335\3\0\1\336\1\335\3\0\1\335\2\0"+
    "\1\336\17\0\2\4\1\76\5\0\1\4\13\0\6\27"+
    "\4\0\6\27\1\337\1\27\1\0\1\27\1\0\3\27"+
    "\1\0\2\27\1\0\2\27\1\340\11\27\4\0\5\27"+
    "\2\4\1\76\5\0\1\4\13\0\6\27\4\0\6\27"+
    "\1\341\1\27\1\0\1\27\1\0\3\27\1\0\2\27"+
    "\1\0\7\27\1\342\4\27\4\0\5\27\2\4\1\76"+
    "\5\0\1\4\13\0\6\27\4\0\1\27\1\343\6\27"+
    "\1\0\1\27\1\0\3\27\1\0\2\27\1\0\14\27"+
    "\4\0\5\27\2\4\1\76\5\0\1\4\13\0\6\27"+
    "\4\0\4\27\1\344\3\27\1\0\1\27\1\0\3\27"+
    "\1\0\2\27\1\0\14\27\4\0\5\27\2\4\1\76"+
    "\5\0\1\4\13\0\6\27\4\0\1\27\1\345\6\27"+
    "\1\0\1\27\1\0\3\27\1\0\2\27\1\0\14\27"+
    "\4\0\5\27\2\4\1\76\5\0\1\4\13\0\6\27"+
    "\4\0\4\27\1\346\3\27\1\0\1\27\1\0\3\27"+
    "\1\0\2\27\1\0\14\27\4\0\5\27\2\4\1\76"+
    "\5\0\1\4\13\0\6\27\4\0\10\27\1\0\1\27"+
    "\1\0\3\27\1\0\2\27\1\0\1\347\6\27\1\350"+
    "\4\27\4\0\5\27\2\4\1\76\5\0\1\4\13\0"+
    "\6\27\4\0\3\27\1\351\4\27\1\0\1\27\1\0"+
    "\3\27\1\0\2\27\1\0\2\27\1\352\11\27\4\0"+
    "\5\27\2\4\1\76\5\0\1\4\13\0\6\27\4\0"+
    "\10\27\1\0\1\27\1\0\3\27\1\0\2\27\1\0"+
    "\3\27\1\353\10\27\4\0\5\27\2\4\1\76\5\0"+
    "\1\4\13\0\6\27\4\0\4\27\1\354\3\27\1\0"+
    "\1\27\1\0\3\27\1\0\2\27\1\0\14\27\4\0"+
    "\5\27\2\4\1\76\5\0\1\4\13\0\6\27\4\0"+
    "\10\27\1\0\1\27\1\0\3\27\1\0\2\27\1\0"+
    "\3\27\1\355\10\27\4\0\5\27\2\4\1\76\5\0"+
    "\1\4\13\0\6\27\4\0\6\27\1\356\1\27\1\0"+
    "\1\27\1\0\3\27\1\0\2\27\1\0\14\27\4\0"+
    "\5\27\2\4\1\76\5\0\1\4\13\0\6\27\4\0"+
    "\10\27\1\0\1\27\1\0\3\27\1\0\2\27\1\0"+
    "\7\27\1\357\4\27\4\0\5\27\2\4\1\76\5\0"+
    "\1\4\13\0\6\27\4\0\1\27\1\360\3\27\1\361"+
    "\2\27\1\0\1\27\1\0\3\27\1\0\2\27\1\0"+
    "\14\27\4\0\5\27\2\4\1\76\5\0\1\4\13\0"+
    "\6\27\4\0\10\27\1\0\1\27\1\0\3\27\1\0"+
    "\2\27\1\0\11\27\1\362\2\27\4\0\1\27\1\363"+
    "\3\27\2\4\1\76\5\0\1\4\13\0\6\27\4\0"+
    "\10\27\1\0\1\27\1\0\3\27\1\0\2\27\1\0"+
    "\1\364\13\27\4\0\5\27\2\4\1\76\5\0\1\4"+
    "\13\0\6\27\4\0\10\27\1\0\1\27\1\0\3\27"+
    "\1\0\2\27\1\0\13\27\1\365\4\0\5\27\2\4"+
    "\1\76\5\0\1\4\13\0\6\27\4\0\10\27\1\0"+
    "\1\27\1\0\3\27\1\0\2\27\1\0\1\366\12\27"+
    "\1\367\4\0\5\27\2\4\1\76\5\0\1\4\13\0"+
    "\6\27\4\0\2\27\1\370\5\27\1\0\1\27\1\0"+
    "\3\27\1\0\2\27\1\0\14\27\4\0\5\27\2\4"+
    "\1\76\5\0\1\4\13\0\6\27\4\0\6\27\1\371"+
    "\1\27\1\0\1\27\1\0\3\27\1\0\2\27\1\0"+
    "\14\27\4\0\5\27\2\4\1\76\5\0\1\4\13\0"+
    "\6\27\4\0\6\27\1\372\1\27\1\0\1\27\1\0"+
    "\3\27\1\0\2\27\1\0\14\27\4\0\5\27\2\4"+
    "\1\76\5\0\1\4\13\0\6\27\4\0\10\27\1\0"+
    "\1\27\1\0\3\27\1\0\2\27\1\0\5\27\1\373"+
    "\6\27\4\0\5\27\2\4\1\76\5\0\1\4\13\0"+
    "\6\27\4\0\10\27\1\0\1\27\1\0\3\27\1\0"+
    "\2\27\1\0\5\27\1\374\6\27\4\0\5\27\2\4"+
    "\1\76\5\0\1\4\13\0\6\27\4\0\10\27\1\0"+
    "\1\27\1\0\3\27\1\0\2\27\1\0\1\375\13\27"+
    "\4\0\5\27\3\0\1\4\1\0\1\10\1\0\1\12"+
    "\1\0\1\4\1\0\1\15\1\0\1\17\1\0\1\21"+
    "\1\0\1\23\1\0\1\25\61\0\2\71\1\72\5\71"+
    "\1\73\1\0\21\71\2\0\13\71\1\0\36\71\1\233"+
    "\5\71\2\73\21\71\2\0\52\71\1\72\5\71\1\73"+
    "\1\232\21\71\1\0\51\71\50\235\1\376\34\235\3\0"+
    "\1\4\5\0\1\4\73\0\3\101\1\77\4\101\1\0"+
    "\1\4\20\101\3\0\60\101\2\0\20\101\3\0\4\101"+
    "\1\246\1\377\52\101\2\0\20\101\3\0\23\101\1\u0100"+
    "\34\101\2\0\20\101\3\0\5\101\1\u0101\52\101\2\0"+
    "\20\101\3\0\30\101\1\u0102\27\101\2\0\20\101\3\0"+
    "\5\101\1\u0103\1\u0104\16\101\1\u0105\32\101\2\0\20\101"+
    "\3\0\6\101\1\u0106\41\101\2\246\1\u0107\5\246\1\u0108"+
    "\1\u0109\21\246\2\0\50\246\2\77\1\100\5\101\1\4"+
    "\1\0\12\101\6\77\3\0\1\101\10\77\1\101\1\77"+
    "\1\101\3\77\1\101\2\77\1\101\1\77\1\u010a\12\77"+
    "\4\101\7\77\1\100\5\101\1\4\1\0\12\101\6\77"+
    "\3\0\1\101\4\77\1\u010b\3\77\1\101\1\77\1\101"+
    "\3\77\1\101\2\77\1\101\14\77\4\101\7\77\1\100"+
    "\5\101\1\4\1\0\12\101\6\77\3\0\1\101\10\77"+
    "\1\101\1\77\1\101\3\77\1\101\2\77\1\101\4\77"+
    "\1\u010c\7\77\4\101\7\77\1\100\5\101\1\4\1\0"+
    "\12\101\6\77\3\0\1\101\3\77\1\104\4\77\1\101"+
    "\1\77\1\101\3\77\1\101\2\77\1\101\14\77\4\101"+
    "\7\77\1\100\5\101\1\4\1\0\12\101\6\77\3\0"+
    "\1\101\10\77\1\101\1\77\1\101\3\77\1\101\2\77"+
    "\1\101\4\77\1\u010d\7\77\4\101\7\77\1\100\5\101"+
    "\1\4\1\0\12\101\6\77\3\0\1\101\5\77\1\u010e"+
    "\2\77\1\101\1\77\1\101\3\77\1\101\2\77\1\101"+
    "\14\77\4\101\7\77\1\100\5\101\1\4\1\0\12\101"+
    "\6\77\3\0\1\101\10\77\1\101\1\77\1\101\3\77"+
    "\1\101\2\77\1\101\1\u010f\6\77\1\u010b\4\77\4\101"+
    "\7\77\1\100\5\101\1\4\1\0\12\101\6\77\3\0"+
    "\1\101\1\77\1\u0110\6\77\1\101\1\77\1\101\3\77"+
    "\1\101\2\77\1\101\14\77\4\101\5\77\50\257\1\u0111"+
    "\34\257\11\u0112\1\u0113\36\u0112\1\260\34\u0112\2\261\1\262"+
    "\5\261\1\263\2\261\1\122\17\261\2\0\52\261\1\u0114"+
    "\5\261\1\263\2\261\1\122\17\261\2\0\103\261\2\0"+
    "\52\261\1\u0114\1\117\1\261\1\117\1\261\1\117\1\263"+
    "\1\u0115\1\261\1\u0116\1\261\1\117\1\261\1\117\1\261"+
    "\1\117\1\261\1\117\7\261\2\0\52\261\1\u0117\5\261"+
    "\1\263\2\261\1\264\17\261\2\0\52\261\1\262\5\261"+
    "\1\263\2\261\1\122\10\261\5\u0118\2\261\2\0\2\261"+
    "\3\u0118\13\261\2\u0118\2\261\1\u0118\2\261\2\u0118\21\261"+
    "\1\262\5\261\1\263\2\261\1\264\12\261\3\117\2\261"+
    "\2\0\52\261\1\262\5\261\1\263\2\261\1\264\12\261"+
    "\3\270\2\261\2\0\50\261\21\0\1\131\66\0\1\136"+
    "\5\0\1\136\120\0\4\u0119\54\0\2\136\1\137\5\0"+
    "\1\136\13\0\1\136\4\300\1\136\4\0\3\136\1\301"+
    "\4\136\1\0\1\136\1\0\1\301\2\136\1\0\1\136"+
    "\1\301\3\136\1\301\11\136\4\0\7\136\1\137\5\0"+
    "\1\136\13\0\6\136\4\0\10\136\1\0\1\136\1\0"+
    "\1\136\1\u011a\1\136\1\0\6\136\1\u011a\10\136\4\0"+
    "\7\136\1\137\5\0\1\136\13\0\6\136\4\0\10\136"+
    "\1\0\1\136\1\0\1\u011a\2\136\1\0\5\136\1\u011a"+
    "\11\136\4\0\7\136\1\137\5\0\1\136\13\0\5\304"+
    "\1\136\4\0\1\136\3\304\4\136\1\0\1\136\1\0"+
    "\1\u011b\1\u011c\1\136\1\0\2\304\2\136\1\304\1\u011b"+
    "\1\u011c\2\304\6\136\4\0\5\136\2\4\1\76\5\0"+
    "\1\4\13\0\6\27\4\0\10\27\1\0\1\27\1\0"+
    "\3\27\1\0\2\27\1\0\13\27\1\u011d\4\0\5\27"+
    "\2\4\1\76\5\0\1\4\13\0\6\27\4\0\1\27"+
    "\1\u011e\6\27\1\0\1\27\1\0\3\27\1\0\2\27"+
    "\1\0\14\27\4\0\5\27\2\4\1\76\5\0\1\4"+
    "\13\0\6\27\4\0\10\27\1\0\1\27\1\0\3\27"+
    "\1\0\2\27\1\0\2\27\1\u011f\11\27\4\0\5\27"+
    "\2\4\1\76\5\0\1\4\13\0\6\27\4\0\10\27"+
    "\1\0\1\27\1\0\3\27\1\0\2\27\1\0\5\27"+
    "\1\u0120\6\27\4\0\5\27\2\4\1\76\5\0\1\4"+
    "\13\0\6\27\4\0\1\27\1\u0121\6\27\1\0\1\27"+
    "\1\0\3\27\1\0\2\27\1\0\14\27\4\0\5\27"+
    "\2\4\1\76\5\0\1\4\13\0\6\27\4\0\10\27"+
    "\1\0\1\27\1\0\3\27\1\0\2\27\1\0\5\27"+
    "\1\u0122\6\27\4\0\5\27\2\4\1\76\5\0\1\4"+
    "\13\0\6\27\4\0\10\27\1\0\1\27\1\0\3\27"+
    "\1\0\2\27\1\0\3\27\1\u0123\10\27\4\0\5\27"+
    "\2\4\1\76\5\0\1\4\13\0\6\27\4\0\4\27"+
    "\1\u0124\3\27\1\0\1\27\1\0\3\27\1\0\2\27"+
    "\1\0\14\27\4\0\5\27\2\4\1\76\5\0\1\4"+
    "\13\0\6\27\4\0\10\27\1\0\1\27\1\0\3\27"+
    "\1\0\2\27\1\0\1\u0125\13\27\4\0\5\27\2\4"+
    "\1\76\5\0\1\4\13\0\6\27\4\0\10\27\1\0"+
    "\1\27\1\0\3\27\1\0\2\27\1\0\10\27\1\u0126"+
    "\3\27\4\0\5\27\2\4\1\76\5\0\1\4\13\0"+
    "\6\27\4\0\10\27\1\0\1\27\1\0\3\27\1\0"+
    "\2\27\1\0\7\27\1\u0127\4\27\4\0\5\27\2\4"+
    "\1\76\5\0\1\4\13\0\6\27\4\0\10\27\1\0"+
    "\1\27\1\0\3\27\1\0\2\27\1\0\5\27\1\u0128"+
    "\6\27\4\0\5\27\2\4\1\76\5\0\1\4\13\0"+
    "\6\27\4\0\6\27\1\u0129\1\27\1\0\1\27\1\0"+
    "\3\27\1\0\2\27\1\0\14\27\4\0\5\27\2\4"+
    "\1\76\5\0\1\4\13\0\6\27\4\0\10\27\1\0"+
    "\1\27\1\0\3\27\1\0\2\27\1\0\4\27\1\u012a"+
    "\7\27\4\0\5\27\2\4\1\76\5\0\1\4\13\0"+
    "\6\27\4\0\1\27\1\u012b\6\27\1\0\1\27\1\0"+
    "\3\27\1\0\2\27\1\0\14\27\4\0\5\27\2\44"+
    "\1\u012c\5\44\1\330\1\170\21\44\2\0\11\44\1\171"+
    "\36\44\2\331\1\44\5\331\1\44\2\331\1\44\4\331"+
    "\1\332\5\331\3\44\2\331\2\0\1\331\1\332\7\44"+
    "\1\334\4\331\1\332\64\331\2\0\11\331\1\u012d\62\331"+
    "\5\u012e\2\331\2\0\2\331\3\u012e\4\331\1\u012d\6\331"+
    "\2\u012e\2\331\1\u012e\2\331\2\u012e\17\331\2\334\1\u012f"+
    "\5\334\1\u0130\22\334\1\0\12\334\1\171\40\334\1\u012f"+
    "\5\334\1\u0130\22\334\2\0\11\334\1\171\36\334\23\0"+
    "\1\277\1\0\4\u0119\23\0\1\277\30\0\2\4\1\76"+
    "\5\0\1\4\13\0\6\27\4\0\10\27\1\0\1\27"+
    "\1\0\3\27\1\0\2\27\1\0\1\u0131\13\27\4\0"+
    "\5\27\2\4\1\76\5\0\1\4\13\0\6\27\4\0"+
    "\10\27\1\0\1\27\1\0\3\27\1\0\2\27\1\0"+
    "\1\27\1\u0132\12\27\4\0\5\27\2\4\1\76\5\0"+
    "\1\4\13\0\6\27\4\0\10\27\1\0\1\27\1\0"+
    "\3\27\1\0\2\27\1\0\5\27\1\u0133\6\27\4\0"+
    "\5\27\2\4\1\76\5\0\1\4\13\0\6\27\4\0"+
    "\10\27\1\0\1\27\1\0\3\27\1\0\2\27\1\0"+
    "\7\27\1\u0134\4\27\4\0\5\27\2\4\1\76\5\0"+
    "\1\4\13\0\6\27\4\0\6\27\1\u0135\1\27\1\0"+
    "\1\27\1\0\3\27\1\0\2\27\1\0\7\27\1\u0136"+
    "\4\27\4\0\5\27\2\4\1\76\5\0\1\4\13\0"+
    "\6\27\4\0\5\27\1\u0137\2\27\1\0\1\27\1\0"+
    "\3\27\1\0\2\27\1\0\14\27\4\0\5\27\2\4"+
    "\1\76\5\0\1\4\13\0\6\27\4\0\10\27\1\0"+
    "\1\27\1\0\3\27\1\0\2\27\1\0\11\27\1\u0138"+
    "\2\27\4\0\5\27\2\4\1\76\5\0\1\4\13\0"+
    "\6\27\4\0\10\27\1\0\1\27\1\0\3\27\1\0"+
    "\2\27\1\0\13\27\1\u0139\4\0\5\27\2\4\1\76"+
    "\5\0\1\4\13\0\6\27\4\0\10\27\1\0\1\27"+
    "\1\0\3\27\1\0\2\27\1\0\1\u013a\13\27\4\0"+
    "\5\27\2\4\1\76\5\0\1\4\13\0\6\27\4\0"+
    "\1\27\1\u013b\6\27\1\0\1\27\1\0\3\27\1\0"+
    "\2\27\1\0\14\27\4\0\5\27\2\4\1\76\5\0"+
    "\1\4\13\0\6\27\4\0\10\27\1\0\1\27\1\0"+
    "\3\27\1\0\2\27\1\0\5\27\1\u013c\6\27\4\0"+
    "\5\27\2\4\1\76\5\0\1\4\13\0\6\27\4\0"+
    "\2\27\1\u013d\5\27\1\0\1\27\1\0\3\27\1\0"+
    "\2\27\1\0\14\27\4\0\5\27\2\4\1\76\5\0"+
    "\1\4\13\0\6\27\4\0\1\27\1\u013e\6\27\1\0"+
    "\1\27\1\0\3\27\1\0\2\27\1\0\14\27\4\0"+
    "\5\27\2\4\1\76\5\0\1\4\13\0\6\27\4\0"+
    "\10\27\1\0\1\27\1\0\3\27\1\0\2\27\1\0"+
    "\12\27\1\u013f\1\27\4\0\5\27\2\4\1\76\5\0"+
    "\1\4\13\0\6\27\4\0\10\27\1\0\1\27\1\0"+
    "\3\27\1\0\2\27\1\0\5\27\1\u0140\6\27\4\0"+
    "\5\27\2\4\1\76\5\0\1\4\13\0\6\27\4\0"+
    "\10\27\1\0\1\27\1\0\3\27\1\0\2\27\1\0"+
    "\5\27\1\u0141\6\27\4\0\5\27\2\4\1\76\5\0"+
    "\1\4\13\0\6\27\4\0\6\27\1\u0142\1\27\1\0"+
    "\1\27\1\0\3\27\1\0\2\27\1\0\14\27\4\0"+
    "\5\27\2\4\1\76\5\0\1\4\13\0\6\27\4\0"+
    "\10\27\1\0\1\27\1\0\3\27\1\0\2\27\1\0"+
    "\3\27\1\u0143\10\27\4\0\5\27\2\4\1\76\5\0"+
    "\1\4\13\0\6\27\4\0\4\27\1\u0144\3\27\1\0"+
    "\1\27\1\0\3\27\1\0\2\27\1\0\14\27\4\0"+
    "\5\27\2\4\1\76\5\0\1\4\13\0\6\27\4\0"+
    "\10\27\1\0\1\27\1\0\3\27\1\0\2\27\1\0"+
    "\5\27\1\u0145\6\27\4\0\5\27\2\4\1\76\5\0"+
    "\1\4\13\0\6\27\4\0\6\27\1\u0146\1\27\1\0"+
    "\1\27\1\0\3\27\1\0\2\27\1\0\14\27\4\0"+
    "\5\27\2\4\1\76\5\0\1\4\13\0\6\27\4\0"+
    "\5\27\1\u0147\2\27\1\0\1\27\1\0\3\27\1\0"+
    "\2\27\1\0\14\27\4\0\5\27\2\4\1\76\5\0"+
    "\1\4\13\0\6\27\4\0\7\27\1\u0148\1\0\1\27"+
    "\1\0\3\27\1\0\2\27\1\0\14\27\4\0\5\27"+
    "\2\4\1\76\5\0\1\4\13\0\6\27\4\0\6\27"+
    "\1\u0149\1\27\1\0\1\27\1\0\3\27\1\0\2\27"+
    "\1\0\14\27\4\0\5\27\2\4\1\76\5\0\1\4"+
    "\13\0\6\27\4\0\10\27\1\0\1\27\1\0\3\27"+
    "\1\0\2\27\1\0\2\27\1\u014a\11\27\4\0\5\27"+
    "\2\4\1\76\5\0\1\4\13\0\6\27\4\0\10\27"+
    "\1\0\1\27\1\0\3\27\1\0\2\27\1\0\13\27"+
    "\1\u014b\4\0\5\27\2\4\1\76\5\0\1\4\13\0"+
    "\6\27\4\0\1\27\1\u014c\6\27\1\0\1\27\1\0"+
    "\3\27\1\0\2\27\1\0\14\27\4\0\5\27\2\4"+
    "\1\76\5\0\1\4\13\0\6\27\4\0\5\27\1\u014d"+
    "\2\27\1\0\1\27\1\0\3\27\1\0\2\27\1\0"+
    "\14\27\4\0\5\27\2\4\1\76\5\0\1\4\13\0"+
    "\6\27\4\0\5\27\1\u014e\2\27\1\0\1\27\1\0"+
    "\3\27\1\0\2\27\1\0\14\27\4\0\5\27\2\4"+
    "\1\76\5\0\1\4\13\0\6\27\4\0\10\27\1\0"+
    "\1\27\1\0\3\27\1\0\2\27\1\0\2\27\1\u014f"+
    "\11\27\4\0\5\27\11\235\1\u0150\36\235\1\376\34\235"+
    "\10\101\2\0\20\101\3\0\24\101\1\u0151\33\101\2\0"+
    "\20\101\3\0\5\101\1\u0152\52\101\2\0\20\101\3\0"+
    "\27\101\1\u0153\30\101\2\0\20\101\3\0\4\101\1\241"+
    "\53\101\2\0\20\101\3\0\27\101\1\u0154\30\101\2\0"+
    "\20\101\3\0\6\101\1\u0155\51\101\2\0\20\101\3\0"+
    "\23\101\1\u0156\6\101\1\u0152\25\101\2\0\20\101\3\0"+
    "\2\101\1\u0157\45\101\2\246\1\u0158\5\246\1\u0108\1\u0109"+
    "\21\246\2\0\52\246\1\u0107\5\246\1\u0108\1\u0109\21\246"+
    "\1\u0159\53\246\1\u0107\5\246\1\u0108\1\0\21\246\2\0"+
    "\13\246\1\0\34\246\2\77\1\100\5\101\1\4\1\0"+
    "\12\101\6\77\3\0\1\101\10\77\1\101\1\77\1\101"+
    "\3\77\1\101\2\77\1\101\2\77\1\u015a\11\77\4\101"+
    "\7\77\1\100\5\101\1\4\1\0\12\101\6\77\3\0"+
    "\1\101\10\77\1\101\1\77\1\101\3\77\1\101\2\77"+
    "\1\101\5\77\1\246\6\77\4\101\7\77\1\100\5\101"+
    "\1\4\1\0\12\101\6\77\3\0\1\101\10\77\1\101"+
    "\1\77\1\101\3\77\1\101\2\77\1\101\5\77\1\u010f"+
    "\6\77\4\101\7\77\1\100\5\101\1\4\1\0\12\101"+
    "\6\77\3\0\1\101\10\77\1\101\1\77\1\101\3\77"+
    "\1\101\2\77\1\101\1\u010f\13\77\4\101\7\77\1\100"+
    "\5\101\1\4\1\0\12\101\6\77\3\0\1\101\10\77"+
    "\1\101\1\77\1\101\3\77\1\101\2\77\1\101\13\77"+
    "\1\u015b\4\101\7\77\1\100\5\101\1\4\1\0\12\101"+
    "\6\77\3\0\1\101\3\77\1\246\4\77\1\101\1\77"+
    "\1\101\3\77\1\101\2\77\1\101\14\77\4\101\7\77"+
    "\1\100\5\101\1\4\1\0\12\101\6\77\3\0\1\101"+
    "\10\77\1\101\1\77\1\101\3\77\1\101\2\77\1\101"+
    "\11\77\1\u015c\2\77\4\101\5\77\11\257\1\u015d\36\257"+
    "\1\u0111\34\257\50\u0112\1\260\34\u0112\2\261\1\u0114\5\261"+
    "\1\263\1\u015e\1\261\1\122\17\261\2\0\52\261\1\u015f"+
    "\5\261\1\u0160\2\261\1\117\4\261\1\267\5\261\1\270"+
    "\2\271\2\261\2\0\1\261\1\267\10\117\4\261\1\267"+
    "\31\261\13\0\1\264\71\0\2\261\1\u0114\5\261\1\263"+
    "\1\117\1\261\1\122\17\261\2\0\52\261\1\262\5\261"+
    "\1\263\2\261\1\122\10\261\5\117\2\261\2\0\2\261"+
    "\3\117\13\261\2\117\2\261\1\117\2\261\2\117\17\261"+
    "\25\0\4\u0119\10\0\1\335\7\0\1\335\4\0\1\335"+
    "\3\0\1\335\22\0\2\136\1\137\5\0\1\136\13\0"+
    "\6\136\4\0\10\136\1\0\1\136\1\0\1\136\1\u0161"+
    "\1\136\1\0\6\136\1\u0161\10\136\4\0\7\136\1\137"+
    "\5\0\1\136\13\0\6\136\4\0\10\136\1\0\1\136"+
    "\1\0\1\u0161\2\136\1\0\5\136\1\u0161\11\136\4\0"+
    "\5\136\2\4\1\76\5\0\1\4\13\0\6\27\4\0"+
    "\10\27\1\0\1\27\1\0\3\27\1\0\2\27\1\0"+
    "\14\27\4\0\1\u0162\4\27\2\4\1\76\5\0\1\4"+
    "\13\0\6\27\4\0\4\27\1\u0163\3\27\1\0\1\27"+
    "\1\0\3\27\1\0\2\27\1\0\14\27\4\0\5\27"+
    "\2\4\1\76\5\0\1\4\13\0\6\27\4\0\6\27"+
    "\1\u0164\1\27\1\0\1\27\1\0\3\27\1\0\2\27"+
    "\1\0\14\27\4\0\5\27\2\4\1\76\5\0\1\4"+
    "\13\0\6\27\4\0\10\27\1\0\1\27\1\0\3\27"+
    "\1\0\2\27\1\0\7\27\1\u0165\4\27\4\0\5\27"+
    "\2\4\1\76\5\0\1\4\13\0\6\27\4\0\5\27"+
    "\1\u0166\2\27\1\0\1\27\1\0\3\27\1\0\2\27"+
    "\1\0\14\27\4\0\5\27\2\4\1\76\5\0\1\4"+
    "\13\0\6\27\4\0\6\27\1\u0167\1\27\1\0\1\27"+
    "\1\0\3\27\1\0\2\27\1\0\14\27\4\0\5\27"+
    "\2\4\1\76\5\0\1\4\13\0\6\27\4\0\10\27"+
    "\1\0\1\27\1\0\3\27\1\0\2\27\1\0\7\27"+
    "\1\u0168\4\27\4\0\5\27\2\4\1\76\5\0\1\4"+
    "\13\0\6\27\4\0\10\27\1\0\1\27\1\0\3\27"+
    "\1\0\2\27\1\0\2\27\1\u0169\11\27\4\0\5\27"+
    "\2\4\1\76\5\0\1\4\13\0\6\27\4\0\10\27"+
    "\1\0\1\27\1\0\3\27\1\0\2\27\1\0\4\27"+
    "\1\u016a\7\27\4\0\5\27\2\4\1\76\5\0\1\4"+
    "\13\0\6\27\4\0\10\27\1\0\1\27\1\0\3\27"+
    "\1\0\2\27\1\0\3\27\1\u016b\10\27\4\0\5\27"+
    "\2\4\1\76\5\0\1\4\13\0\6\27\4\0\6\27"+
    "\1\u016c\1\27\1\0\1\27\1\0\3\27\1\0\2\27"+
    "\1\0\14\27\4\0\5\27\2\44\1\u012c\5\44\2\330"+
    "\21\44\2\0\11\44\1\171\36\44\24\331\5\44\2\331"+
    "\2\0\2\331\3\44\4\331\1\u012d\6\331\2\44\2\331"+
    "\1\44\2\331\2\44\17\331\2\334\1\u016d\5\334\1\u016e"+
    "\22\334\2\0\11\334\1\171\36\334\2\0\1\334\5\0"+
    "\1\334\2\0\1\334\4\0\1\u016f\5\0\3\334\2\0"+
    "\1\333\1\334\1\0\1\u016f\10\334\4\0\1\u016f\31\0"+
    "\2\4\1\76\5\0\1\4\13\0\6\27\4\0\4\27"+
    "\1\u0170\3\27\1\0\1\27\1\0\3\27\1\0\2\27"+
    "\1\0\14\27\4\0\5\27\2\4\1\76\5\0\1\4"+
    "\13\0\6\27\4\0\10\27\1\0\1\27\1\0\3\27"+
    "\1\0\2\27\1\0\14\27\4\0\3\27\1\u0171\1\27"+
    "\2\4\1\76\5\0\1\4\13\0\6\27\4\0\10\27"+
    "\1\0\1\27\1\0\3\27\1\0\2\27\1\0\7\27"+
    "\1\u0172\4\27\4\0\5\27\2\4\1\76\5\0\1\4"+
    "\13\0\6\27\4\0\10\27\1\0\1\27\1\0\3\27"+
    "\1\0\2\27\1\0\1\u0173\13\27\4\0\5\27\2\4"+
    "\1\76\5\0\1\4\13\0\6\27\4\0\6\27\1\u0174"+
    "\1\27\1\0\1\27\1\0\3\27\1\0\2\27\1\0"+
    "\14\27\4\0\5\27\2\4\1\76\5\0\1\4\13\0"+
    "\6\27\4\0\4\27\1\u0175\3\27\1\0\1\27\1\0"+
    "\3\27\1\0\2\27\1\0\14\27\4\0\5\27\2\4"+
    "\1\76\5\0\1\4\13\0\6\27\4\0\10\27\1\0"+
    "\1\27\1\0\3\27\1\0\2\27\1\0\11\27\1\u0176"+
    "\2\27\4\0\5\27\2\4\1\76\5\0\1\4\13\0"+
    "\6\27\4\0\10\27\1\0\1\27\1\0\3\27\1\0"+
    "\2\27\1\0\3\27\1\u0177\10\27\4\0\5\27\2\4"+
    "\1\76\5\0\1\4\13\0\6\27\4\0\6\27\1\u0178"+
    "\1\27\1\0\1\27\1\0\3\27\1\0\2\27\1\0"+
    "\14\27\4\0\5\27\2\4\1\76\5\0\1\4\13\0"+
    "\6\27\4\0\10\27\1\0\1\27\1\0\3\27\1\0"+
    "\2\27\1\0\2\27\1\u0179\11\27\4\0\5\27\2\4"+
    "\1\76\5\0\1\4\13\0\6\27\4\0\10\27\1\0"+
    "\1\27\1\0\3\27\1\0\2\27\1\0\12\27\1\u017a"+
    "\1\27\4\0\5\27\2\4\1\76\5\0\1\4\13\0"+
    "\6\27\4\0\5\27\1\u017b\2\27\1\0\1\27\1\0"+
    "\3\27\1\0\2\27\1\0\14\27\4\0\5\27\2\4"+
    "\1\76\5\0\1\4\13\0\6\27\4\0\10\27\1\0"+
    "\1\27\1\0\3\27\1\0\2\27\1\0\1\u017c\13\27"+
    "\4\0\5\27\2\4\1\76\5\0\1\4\13\0\6\27"+
    "\4\0\10\27\1\0\1\27\1\0\3\27\1\0\2\27"+
    "\1\0\1\27\1\u017d\12\27\4\0\5\27\2\4\1\76"+
    "\5\0\1\4\13\0\6\27\4\0\10\27\1\0\1\27"+
    "\1\0\3\27\1\0\2\27\1\0\5\27\1\u017e\6\27"+
    "\4\0\5\27\2\4\1\76\5\0\1\4\13\0\6\27"+
    "\4\0\10\27\1\0\1\27\1\0\3\27\1\0\2\27"+
    "\1\0\13\27\1\u017f\4\0\5\27\2\4\1\76\5\0"+
    "\1\4\13\0\6\27\4\0\10\27\1\0\1\27\1\0"+
    "\3\27\1\0\2\27\1\0\1\27\1\u0180\12\27\4\0"+
    "\5\27\2\4\1\76\5\0\1\4\13\0\6\27\4\0"+
    "\6\27\1\u0181\1\27\1\0\1\27\1\0\3\27\1\0"+
    "\2\27\1\0\14\27\4\0\5\27\2\4\1\76\5\0"+
    "\1\4\13\0\6\27\4\0\1\27\1\u0182\6\27\1\0"+
    "\1\27\1\0\3\27\1\0\2\27\1\0\14\27\4\0"+
    "\5\27\2\4\1\76\5\0\1\4\13\0\6\27\4\0"+
    "\10\27\1\0\1\27\1\0\3\27\1\0\2\27\1\0"+
    "\5\27\1\u0183\6\27\4\0\5\27\2\4\1\76\5\0"+
    "\1\4\13\0\6\27\4\0\10\27\1\0\1\27\1\0"+
    "\3\27\1\0\2\27\1\0\1\u0184\13\27\4\0\5\27"+
    "\2\4\1\76\5\0\1\4\13\0\6\27\4\0\2\27"+
    "\1\u0185\5\27\1\0\1\27\1\0\3\27\1\0\2\27"+
    "\1\0\14\27\4\0\5\27\2\4\1\76\5\0\1\4"+
    "\13\0\6\27\4\0\10\27\1\0\1\27\1\0\3\27"+
    "\1\0\2\27\1\0\2\27\1\u0186\11\27\4\0\5\27"+
    "\2\4\1\76\5\0\1\4\13\0\6\27\4\0\1\27"+
    "\1\u0187\6\27\1\0\1\27\1\0\3\27\1\0\2\27"+
    "\1\0\14\27\4\0\5\27\2\4\1\76\5\0\1\4"+
    "\13\0\6\27\4\0\10\27\1\0\1\27\1\0\3\27"+
    "\1\0\2\27\1\0\5\27\1\u0188\6\27\4\0\5\27"+
    "\10\101\2\0\20\101\3\0\25\101\1\u0189\32\101\2\0"+
    "\20\101\3\0\30\101\1\246\27\101\2\0\20\101\3\0"+
    "\30\101\1\u0156\27\101\2\0\20\101\3\0\23\101\1\u0156"+
    "\34\101\2\0\20\101\3\0\36\101\1\u018a\21\101\2\0"+
    "\20\101\3\0\4\101\1\246\53\101\2\0\20\101\3\0"+
    "\34\101\1\u018b\13\101\2\246\1\u0158\5\246\2\u0108\21\246"+
    "\2\0\52\246\1\u0107\5\246\1\u0108\1\u0109\21\246\1\0"+
    "\51\246\2\77\1\100\5\101\1\4\1\0\12\101\6\77"+
    "\3\0\1\101\10\77\1\101\1\77\1\101\3\77\1\101"+
    "\2\77\1\101\3\77\1\u018c\10\77\4\101\7\77\1\100"+
    "\5\101\1\4\1\0\12\101\6\77\3\0\1\101\5\77"+
    "\1\246\2\77\1\101\1\77\1\101\3\77\1\101\2\77"+
    "\1\101\14\77\4\101\7\77\1\100\5\101\1\4\1\0"+
    "\12\101\6\77\3\0\1\101\10\77\1\101\1\77\1\101"+
    "\3\77\1\101\2\77\1\101\12\77\1\u018d\1\77\4\101"+
    "\5\77\2\261\1\262\5\261\1\u015e\22\261\2\0\52\261"+
    "\1\u018e\5\261\1\263\2\261\1\264\17\261\2\0\52\261"+
    "\1\262\5\261\1\u015e\2\261\1\u018f\17\261\2\0\50\261"+
    "\2\4\1\76\5\0\1\4\13\0\6\27\4\0\10\27"+
    "\1\0\1\27\1\0\3\27\1\0\2\27\1\0\4\27"+
    "\1\u0190\7\27\4\0\5\27\2\4\1\76\5\0\1\4"+
    "\13\0\6\27\4\0\10\27\1\0\1\27\1\0\3\27"+
    "\1\0\2\27\1\0\10\27\1\u0191\3\27\4\0\5\27"+
    "\2\4\1\76\5\0\1\4\13\0\6\27\4\0\4\27"+
    "\1\u0192\3\27\1\0\1\27\1\0\3\27\1\0\2\27"+
    "\1\0\14\27\4\0\5\27\2\4\1\76\5\0\1\4"+
    "\13\0\6\27\4\0\10\27\1\0\1\27\1\0\3\27"+
    "\1\0\2\27\1\0\5\27\1\u0193\6\27\4\0\5\27"+
    "\2\4\1\76\5\0\1\4\13\0\6\27\4\0\6\27"+
    "\1\u0194\1\27\1\0\1\27\1\0\3\27\1\0\2\27"+
    "\1\0\14\27\4\0\5\27\2\4\1\76\5\0\1\4"+
    "\13\0\6\27\4\0\1\27\1\u0195\6\27\1\0\1\27"+
    "\1\0\3\27\1\0\2\27\1\0\14\27\4\0\5\27"+
    "\2\4\1\76\5\0\1\4\13\0\6\27\4\0\10\27"+
    "\1\0\1\27\1\0\3\27\1\0\2\27\1\0\5\27"+
    "\1\u0196\6\27\4\0\5\27\2\4\1\76\5\0\1\4"+
    "\13\0\6\27\4\0\1\27\1\u0197\6\27\1\0\1\27"+
    "\1\0\3\27\1\0\2\27\1\0\14\27\4\0\5\27"+
    "\2\4\1\76\5\0\1\4\13\0\6\27\4\0\10\27"+
    "\1\0\1\27\1\0\3\27\1\0\2\27\1\0\1\u0198"+
    "\13\27\4\0\5\27\2\334\1\u0199\5\334\1\u016e\1\u0130"+
    "\21\334\2\0\11\334\1\171\36\334\2\0\1\334\5\0"+
    "\1\334\2\0\1\334\4\0\1\u016f\5\0\3\334\5\0"+
    "\1\u016f\10\334\4\0\1\u016f\55\0\5\u019a\6\0\3\u019a"+
    "\13\0\2\u019a\2\0\1\u019a\2\0\2\u019a\17\0\2\4"+
    "\1\76\5\0\1\4\13\0\6\27\4\0\10\27\1\0"+
    "\1\27\1\0\3\27\1\0\2\27\1\0\5\27\1\u019b"+
    "\6\27\4\0\5\27\2\4\1\76\5\0\1\4\13\0"+
    "\6\27\4\0\4\27\1\u019c\3\27\1\0\1\27\1\0"+
    "\3\27\1\0\2\27\1\0\14\27\4\0\5\27\2\4"+
    "\1\76\5\0\1\4\13\0\6\27\4\0\10\27\1\0"+
    "\1\27\1\0\3\27\1\0\2\27\1\0\6\27\1\u019d"+
    "\5\27\4\0\5\27\2\4\1\76\5\0\1\4\13\0"+
    "\6\27\4\0\4\27\1\u019e\3\27\1\0\1\27\1\0"+
    "\3\27\1\0\2\27\1\0\14\27\4\0\5\27\2\4"+
    "\1\76\5\0\1\4\13\0\6\27\4\0\10\27\1\0"+
    "\1\27\1\0\3\27\1\0\2\27\1\0\2\27\1\u019f"+
    "\11\27\4\0\5\27\2\4\1\76\5\0\1\4\13\0"+
    "\6\27\4\0\10\27\1\0\1\27\1\0\3\27\1\0"+
    "\2\27\1\0\5\27\1\u01a0\6\27\4\0\5\27\2\4"+
    "\1\76\5\0\1\4\13\0\6\27\4\0\10\27\1\0"+
    "\1\27\1\0\3\27\1\0\2\27\1\0\5\27\1\u01a1"+
    "\6\27\4\0\5\27\2\4\1\76\5\0\1\4\13\0"+
    "\6\27\4\0\10\27\1\0\1\27\1\0\3\27\1\0"+
    "\2\27\1\0\1\u01a2\13\27\4\0\5\27\2\4\1\76"+
    "\5\0\1\4\13\0\6\27\4\0\4\27\1\u01a3\3\27"+
    "\1\0\1\27\1\0\3\27\1\0\2\27\1\0\14\27"+
    "\4\0\5\27\2\4\1\76\5\0\1\4\13\0\6\27"+
    "\4\0\10\27\1\0\1\27\1\0\3\27\1\0\2\27"+
    "\1\0\1\27\1\u01a4\12\27\4\0\5\27\2\4\1\76"+
    "\5\0\1\4\13\0\6\27\4\0\6\27\1\u01a5\1\27"+
    "\1\0\1\27\1\0\3\27\1\0\2\27\1\0\14\27"+
    "\4\0\5\27\2\4\1\76\5\0\1\4\13\0\6\27"+
    "\4\0\10\27\1\0\1\27\1\0\3\27\1\0\2\27"+
    "\1\0\4\27\1\u01a6\7\27\4\0\5\27\2\4\1\76"+
    "\5\0\1\4\13\0\6\27\4\0\3\27\1\u01a7\4\27"+
    "\1\0\1\27\1\0\3\27\1\0\2\27\1\0\14\27"+
    "\4\0\5\27\2\4\1\76\5\0\1\4\13\0\6\27"+
    "\4\0\10\27\1\0\1\27\1\0\3\27\1\0\2\27"+
    "\1\0\14\27\4\0\3\27\1\u01a8\1\27\2\4\1\76"+
    "\5\0\1\4\13\0\6\27\4\0\6\27\1\u01a9\1\27"+
    "\1\0\1\27\1\0\3\27\1\0\2\27\1\0\14\27"+
    "\4\0\5\27\2\4\1\76\5\0\1\4\13\0\6\27"+
    "\4\0\10\27\1\0\1\27\1\0\3\27\1\0\2\27"+
    "\1\0\1\27\1\u01aa\12\27\4\0\5\27\2\4\1\76"+
    "\5\0\1\4\13\0\6\27\4\0\10\27\1\0\1\27"+
    "\1\0\3\27\1\0\2\27\1\0\1\27\1\u01ab\12\27"+
    "\4\0\5\27\2\4\1\76\5\0\1\4\13\0\6\27"+
    "\4\0\10\27\1\0\1\27\1\0\3\27\1\0\2\27"+
    "\1\0\2\27\1\u01ac\11\27\4\0\5\27\2\4\1\76"+
    "\5\0\1\4\13\0\6\27\4\0\10\27\1\0\1\27"+
    "\1\0\3\27\1\0\2\27\1\0\13\27\1\u01ad\4\0"+
    "\5\27\2\4\1\76\5\0\1\4\13\0\6\27\4\0"+
    "\6\27\1\u01ae\1\27\1\0\1\27\1\0\3\27\1\0"+
    "\2\27\1\0\14\27\4\0\5\27\10\101\2\0\20\101"+
    "\3\0\26\101\1\u01af\31\101\2\0\20\101\3\0\6\101"+
    "\1\246\51\101\2\0\20\101\3\0\35\101\1\u01b0\12\101"+
    "\2\77\1\100\5\101\1\4\1\0\12\101\6\77\3\0"+
    "\1\101\10\77\1\101\1\77\1\101\3\77\1\101\2\77"+
    "\1\101\4\77\1\u010b\7\77\4\101\7\77\1\100\5\101"+
    "\1\4\1\0\12\101\6\77\3\0\1\101\1\77\1\246"+
    "\6\77\1\101\1\77\1\101\3\77\1\101\2\77\1\101"+
    "\14\77\4\101\5\77\2\261\1\u0114\5\261\1\263\1\u0160"+
    "\1\261\1\122\17\261\2\0\50\261\2\4\1\76\5\0"+
    "\1\4\13\0\6\27\4\0\1\27\1\u01b1\6\27\1\0"+
    "\1\27\1\0\3\27\1\0\2\27\1\0\14\27\4\0"+
    "\5\27\2\4\1\76\5\0\1\4\13\0\6\27\4\0"+
    "\5\27\1\u01b2\2\27\1\0\1\27\1\0\3\27\1\0"+
    "\2\27\1\0\14\27\4\0\5\27\2\4\1\76\5\0"+
    "\1\4\13\0\6\27\4\0\10\27\1\0\1\27\1\0"+
    "\3\27\1\0\2\27\1\0\5\27\1\u01b3\6\27\4\0"+
    "\5\27\2\4\1\76\5\0\1\4\13\0\6\27\4\0"+
    "\6\27\1\u01b4\1\27\1\0\1\27\1\0\3\27\1\0"+
    "\2\27\1\0\14\27\4\0\5\27\2\4\1\76\5\0"+
    "\1\4\13\0\6\27\4\0\3\27\1\u01b5\4\27\1\0"+
    "\1\27\1\0\3\27\1\0\2\27\1\0\14\27\4\0"+
    "\5\27\2\4\1\76\5\0\1\4\13\0\6\27\4\0"+
    "\10\27\1\0\1\27\1\0\3\27\1\0\2\27\1\0"+
    "\2\27\1\u01b6\11\27\4\0\5\27\2\4\1\76\5\0"+
    "\1\4\13\0\6\27\4\0\10\27\1\0\1\27\1\0"+
    "\3\27\1\0\2\27\1\0\2\27\1\u01b7\11\27\4\0"+
    "\5\27\2\334\1\u0199\5\334\2\u016e\21\334\2\0\11\334"+
    "\1\171\36\334\24\0\5\334\6\0\3\334\13\0\2\334"+
    "\2\0\1\334\2\0\2\334\17\0\2\4\1\76\5\0"+
    "\1\4\13\0\6\27\4\0\10\27\1\0\1\27\1\0"+
    "\3\27\1\0\2\27\1\0\3\27\1\u01b8\10\27\4\0"+
    "\5\27\2\4\1\76\5\0\1\4\13\0\6\27\4\0"+
    "\10\27\1\0\1\27\1\0\3\27\1\0\2\27\1\0"+
    "\1\27\1\u01b9\12\27\4\0\5\27\2\4\1\76\5\0"+
    "\1\4\13\0\6\27\4\0\10\27\1\0\1\27\1\0"+
    "\3\27\1\0\2\27\1\0\5\27\1\u01ba\6\27\4\0"+
    "\5\27\2\4\1\76\5\0\1\4\13\0\6\27\4\0"+
    "\6\27\1\u01bb\1\27\1\0\1\27\1\0\3\27\1\0"+
    "\2\27\1\0\14\27\4\0\5\27\2\4\1\76\5\0"+
    "\1\4\13\0\6\27\4\0\10\27\1\0\1\27\1\0"+
    "\3\27\1\0\2\27\1\0\1\27\1\u01bc\12\27\4\0"+
    "\5\27\2\4\1\76\5\0\1\4\13\0\6\27\4\0"+
    "\10\27\1\0\1\27\1\0\3\27\1\0\2\27\1\0"+
    "\6\27\1\u01bd\5\27\4\0\5\27\2\4\1\76\5\0"+
    "\1\4\13\0\6\27\4\0\10\27\1\0\1\27\1\0"+
    "\3\27\1\0\2\27\1\0\5\27\1\u01be\6\27\4\0"+
    "\5\27\2\4\1\76\5\0\1\4\13\0\6\27\4\0"+
    "\6\27\1\u01bf\1\27\1\0\1\27\1\0\3\27\1\0"+
    "\2\27\1\0\14\27\4\0\5\27\2\4\1\76\5\0"+
    "\1\4\13\0\6\27\4\0\10\27\1\0\1\27\1\0"+
    "\3\27\1\0\2\27\1\0\5\27\1\u01c0\6\27\4\0"+
    "\5\27\2\4\1\76\5\0\1\4\13\0\6\27\4\0"+
    "\1\27\1\u01c1\6\27\1\0\1\27\1\0\3\27\1\0"+
    "\2\27\1\0\14\27\4\0\5\27\2\4\1\76\5\0"+
    "\1\4\13\0\6\27\4\0\10\27\1\0\1\27\1\0"+
    "\3\27\1\0\2\27\1\0\13\27\1\u01c2\4\0\5\27"+
    "\10\101\2\0\20\101\3\0\27\101\1\u0152\30\101\2\0"+
    "\20\101\3\0\2\101\1\246\45\101\2\4\1\76\5\0"+
    "\1\4\13\0\6\27\4\0\10\27\1\0\1\27\1\0"+
    "\3\27\1\0\2\27\1\0\1\27\1\u01c3\12\27\4\0"+
    "\5\27\2\4\1\76\5\0\1\4\13\0\6\27\4\0"+
    "\10\27\1\0\1\27\1\0\3\27\1\0\2\27\1\0"+
    "\10\27\1\u01c4\3\27\4\0\5\27\2\4\1\76\5\0"+
    "\1\4\13\0\6\27\4\0\5\27\1\u01c5\2\27\1\0"+
    "\1\27\1\0\3\27\1\0\2\27\1\0\14\27\4\0"+
    "\5\27\2\4\1\76\5\0\1\4\13\0\6\27\4\0"+
    "\10\27\1\0\1\27\1\0\3\27\1\0\2\27\1\0"+
    "\5\27\1\u01c6\6\27\4\0\5\27\2\4\1\76\5\0"+
    "\1\4\13\0\6\27\4\0\10\27\1\0\1\27\1\0"+
    "\3\27\1\0\2\27\1\0\5\27\1\u01c7\6\27\4\0"+
    "\5\27\2\4\1\76\5\0\1\4\13\0\6\27\4\0"+
    "\10\27\1\0\1\27\1\0\3\27\1\0\2\27\1\0"+
    "\5\27\1\u01c8\6\27\4\0\5\27\2\4\1\76\5\0"+
    "\1\4\13\0\6\27\4\0\1\27\1\u01c9\6\27\1\0"+
    "\1\27\1\0\3\27\1\0\2\27\1\0\14\27\4\0"+
    "\5\27\2\4\1\76\5\0\1\4\13\0\6\27\4\0"+
    "\10\27\1\0\1\27\1\0\3\27\1\0\2\27\1\0"+
    "\4\27\1\u01ca\7\27\4\0\5\27\2\4\1\76\5\0"+
    "\1\4\13\0\6\27\4\0\10\27\1\0\1\27\1\0"+
    "\3\27\1\0\2\27\1\0\6\27\1\u01cb\5\27\4\0"+
    "\5\27\2\4\1\76\5\0\1\4\13\0\6\27\4\0"+
    "\10\27\1\0\1\27\1\0\3\27\1\0\2\27\1\0"+
    "\1\27\1\u01cc\12\27\4\0\5\27\2\4\1\76\5\0"+
    "\1\4\13\0\6\27\4\0\10\27\1\0\1\27\1\0"+
    "\3\27\1\0\2\27\1\0\5\27\1\u01cd\6\27\4\0"+
    "\5\27\2\4\1\76\5\0\1\4\13\0\6\27\4\0"+
    "\10\27\1\0\1\27\1\0\3\27\1\0\2\27\1\0"+
    "\4\27\1\u01ce\7\27\4\0\5\27\2\4\1\76\5\0"+
    "\1\4\13\0\6\27\4\0\5\27\1\u01cf\2\27\1\0"+
    "\1\27\1\0\3\27\1\0\2\27\1\0\14\27\4\0"+
    "\5\27\2\4\1\76\5\0\1\4\13\0\6\27\4\0"+
    "\10\27\1\0\1\27\1\0\3\27\1\0\2\27\1\0"+
    "\5\27\1\u01d0\6\27\4\0\5\27\2\4\1\76\5\0"+
    "\1\4\13\0\6\27\4\0\5\27\1\u01d1\2\27\1\0"+
    "\1\27\1\0\3\27\1\0\2\27\1\0\14\27\4\0"+
    "\5\27\2\4\1\76\5\0\1\4\13\0\6\27\4\0"+
    "\10\27\1\0\1\27\1\0\3\27\1\0\2\27\1\0"+
    "\7\27\1\u01d2\4\27\4\0\5\27\2\4\1\76\5\0"+
    "\1\4\13\0\6\27\4\0\10\27\1\0\1\27\1\0"+
    "\3\27\1\0\2\27\1\0\1\27\1\u01d3\12\27\4\0"+
    "\5\27\2\4\1\76\5\0\1\4\13\0\6\27\4\0"+
    "\1\27\1\u01d4\6\27\1\0\1\27\1\0\3\27\1\0"+
    "\2\27\1\0\14\27\4\0\5\27\2\4\1\76\5\0"+
    "\1\4\13\0\6\27\4\0\10\27\1\0\1\27\1\0"+
    "\3\27\1\0\2\27\1\0\4\27\1\u01d5\7\27\4\0"+
    "\5\27\2\4\1\76\5\0\1\4\13\0\6\27\4\0"+
    "\10\27\1\0\1\27\1\0\3\27\1\0\2\27\1\0"+
    "\5\27\1\u01d6\6\27\4\0\5\27\2\4\1\76\5\0"+
    "\1\4\13\0\6\27\4\0\6\27\1\u01d7\1\27\1\0"+
    "\1\27\1\0\3\27\1\0\2\27\1\0\14\27\4\0"+
    "\5\27\2\4\1\76\5\0\1\4\13\0\6\27\4\0"+
    "\1\27\1\u01d8\6\27\1\0\1\27\1\0\3\27\1\0"+
    "\2\27\1\0\14\27\4\0\5\27\2\4\1\76\5\0"+
    "\1\4\13\0\6\27\4\0\10\27\1\0\1\27\1\0"+
    "\3\27\1\0\2\27\1\0\7\27\1\u01d9\4\27\4\0"+
    "\5\27\2\4\1\76\5\0\1\4\13\0\6\27\4\0"+
    "\6\27\1\u01da\1\27\1\0\1\27\1\0\3\27\1\0"+
    "\2\27\1\0\14\27\4\0\5\27\2\4\1\76\5\0"+
    "\1\4\13\0\6\27\4\0\10\27\1\0\1\27\1\0"+
    "\3\27\1\0\2\27\1\0\7\27\1\u01db\4\27\4\0"+
    "\5\27\2\4\1\76\5\0\1\4\13\0\6\27\4\0"+
    "\6\27\1\u01dc\1\27\1\0\1\27\1\0\3\27\1\0"+
    "\2\27\1\0\14\27\4\0\5\27\2\4\1\76\5\0"+
    "\1\4\13\0\6\27\4\0\10\27\1\0\1\27\1\0"+
    "\3\27\1\0\2\27\1\0\6\27\1\u01dd\5\27\4\0"+
    "\5\27\2\4\1\76\5\0\1\4\13\0\6\27\4\0"+
    "\6\27\1\u01de\1\27\1\0\1\27\1\0\3\27\1\0"+
    "\2\27\1\0\14\27\4\0\5\27\2\4\1\76\5\0"+
    "\1\4\13\0\6\27\4\0\10\27\1\0\1\27\1\0"+
    "\3\27\1\0\2\27\1\0\1\27\1\u01df\12\27\4\0"+
    "\5\27\2\4\1\76\5\0\1\4\13\0\6\27\4\0"+
    "\1\27\1\u01e0\6\27\1\0\1\27\1\0\3\27\1\0"+
    "\2\27\1\0\14\27\4\0\5\27\2\4\1\76\5\0"+
    "\1\4\13\0\6\27\4\0\10\27\1\0\1\27\1\0"+
    "\3\27\1\0\2\27\1\0\7\27\1\u01e1\4\27\4\0"+
    "\5\27\2\4\1\76\5\0\1\4\13\0\6\27\4\0"+
    "\6\27\1\u01e2\1\27\1\0\1\27\1\0\3\27\1\0"+
    "\2\27\1\0\14\27\4\0\5\27";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  1,  1,  1,  1,  1,  9,  9,  9,  9,  1,  1,  1,  9,  1, 
     9,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  9,  9,  9,  1,  1,  1,  1,  1,  1,  0,  1,  0,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  0,  9,  9,  1,  1,  9,  1,  1, 
     0,  9,  9,  1,  9,  1,  0,  9,  9,  9,  9,  9,  9,  1,  0,  1, 
     1,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  9,  9,  9,  9,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  9,  9,  1,  0,  0,  1,  1,  1,  0,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  0,  9,  1,  1,  1,  1,  1,  9,  9,  0,  0,  1,  0,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  0,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1,  0, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /* user code: */
    private int lastToken;
    private int nextState=YYINITIAL;
    
    /** 
     * next Token method that allows you to control if whitespace and comments are
     * returned as tokens.
     */
    public Token getNextToken(boolean returnComments, boolean returnWhiteSpace)throws IOException{
        Token t = getNextToken();
        while (t != null && ((!returnWhiteSpace && t.isWhiteSpace()) || (!returnComments && t.isComment()))){
            t = getNextToken();
        }
        return (t); 
    }

    /**
     * Prints out tokens from a file or System.in.
     * If no arguments are given, System.in will be used for input.
     * If more arguments are given, the first argument will be used as
     * the name of the file to use as input
     *
     * @param args program arguments, of which the first is a filename
     */
    public static void main(String[] args) {
        InputStream in;
        try {
            if (args.length > 0){
                File f = new File(args[0]);
                if (f.exists()){
                    if (f.canRead()){
                        in = new FileInputStream(f);
                    } else {
                        throw new IOException("Could not open " + args[0]);
                    }
                } else {
                    throw new IOException("Could not find " + args[0]);
                }                   
            } else {
                in = System.in;
            }       
            CLexer shredder = new CLexer(in);
            Token t;
            while ((t = shredder.getNextToken()) != null) {
                if (t.getID() != CToken.WHITE_SPACE){
                    System.out.println(t);
                }
            }
        } catch (IOException e){
            System.out.println(e.getMessage());
        }
    } 

    /**
     * Closes the current input stream, and resets the scanner to read from a new input stream.
	 * All internal variables are reset, the old input stream  cannot be reused
	 * (content of the internal buffer is discarded and lost).
	 * The lexical state is set to the inititial state.
     * Subsequent tokens read from the lexer will start with the line, char, and column
     * values given here.
     *
     * @param reader The new input.
     * @param yyline The line number of the first token.
     * @param yychar The position (relative to the start of the stream) of the first token.
     * @param yycolumn The position (relative to the line) of the first token.
     * @throws IOException if an IOExecption occurs while switching readers.
     */
    public void reset(java.io.Reader reader, int yyline, int yychar, int yycolumn) throws IOException{
        yyreset(reader);
        this.yyline = yyline;
		this.yychar = yychar;
		this.yycolumn = yycolumn;
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CLexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public CLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[26910];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public Token getNextToken() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yychar+= yy_markedPos_l-yy_startRead;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
          }
          break;
        default:
          yy_r = false;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 26: 
          {  
    nextState = YYINITIAL;
    lastToken = CToken.WHITE_SPACE;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return (t);
 }
        case 483: break;
        case 22: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 34: 
        case 39: 
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
        case 48: 
        case 49: 
        case 54: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 126: 
        case 127: 
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 135: 
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 151: 
        case 196: 
        case 197: 
        case 198: 
        case 199: 
        case 200: 
        case 202: 
        case 204: 
        case 205: 
        case 206: 
        case 208: 
        case 209: 
        case 210: 
        case 211: 
        case 212: 
        case 213: 
        case 223: 
        case 224: 
        case 225: 
        case 226: 
        case 227: 
        case 228: 
        case 229: 
        case 230: 
        case 231: 
        case 232: 
        case 233: 
        case 234: 
        case 235: 
        case 236: 
        case 237: 
        case 238: 
        case 239: 
        case 240: 
        case 241: 
        case 242: 
        case 243: 
        case 244: 
        case 245: 
        case 246: 
        case 247: 
        case 248: 
        case 249: 
        case 250: 
        case 251: 
        case 252: 
        case 285: 
        case 287: 
        case 288: 
        case 289: 
        case 290: 
        case 291: 
        case 292: 
        case 293: 
        case 295: 
        case 296: 
        case 298: 
        case 304: 
        case 305: 
        case 307: 
        case 308: 
        case 309: 
        case 312: 
        case 313: 
        case 314: 
        case 315: 
        case 316: 
        case 317: 
        case 319: 
        case 321: 
        case 322: 
        case 323: 
        case 324: 
        case 325: 
        case 326: 
        case 327: 
        case 328: 
        case 329: 
        case 331: 
        case 332: 
        case 333: 
        case 334: 
        case 354: 
        case 356: 
        case 357: 
        case 358: 
        case 359: 
        case 360: 
        case 361: 
        case 362: 
        case 363: 
        case 367: 
        case 370: 
        case 373: 
        case 374: 
        case 375: 
        case 376: 
        case 377: 
        case 378: 
        case 379: 
        case 380: 
        case 381: 
        case 382: 
        case 383: 
        case 385: 
        case 386: 
        case 387: 
        case 388: 
        case 389: 
        case 390: 
        case 400: 
        case 402: 
        case 403: 
        case 404: 
        case 405: 
        case 406: 
        case 407: 
        case 411: 
        case 412: 
        case 413: 
        case 414: 
        case 417: 
        case 424: 
        case 425: 
        case 427: 
        case 428: 
        case 429: 
        case 432: 
        case 433: 
        case 434: 
        case 435: 
        case 438: 
        case 439: 
        case 440: 
        case 441: 
        case 443: 
        case 444: 
        case 446: 
        case 448: 
        case 449: 
        case 450: 
        case 451: 
        case 456: 
        case 458: 
        case 459: 
        case 460: 
        case 464: 
        case 465: 
        case 466: 
        case 467: 
        case 469: 
        case 471: 
        case 472: 
        case 473: 
        case 474: 
        case 476: 
        case 478: 
        case 479: 
        case 480: 
          {  
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.IDENTIFIER;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 484: break;
        case 123: 
          {  
    lastToken = CToken.OPERATOR_INCREMENT;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
 }
        case 485: break;
        case 78: 
        case 79: 
        case 181: 
        case 183: 
        case 184: 
        case 277: 
        case 350: 
        case 351: 
          {  
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.ERROR_UNCLOSED_CHARACTER;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 486: break;
        case 90: 
          {  
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_SUBTRACT_ASSIGN;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 487: break;
        case 121: 
          {  
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_MULTIPLY_ASSIGN;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 488: break;
        case 13: 
        case 176: 
        case 177: 
        case 180: 
        case 182: 
        case 275: 
        case 276: 
        case 278: 
        case 279: 
        case 349: 
        case 397: 
          {  
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.ERROR_MALFORMED_UNCLOSED_CHARACTER;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 489: break;
        case 75: 
          {  
    nextState = YYINITIAL;
    lastToken = CToken.COMMENT_END_OF_LINE;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 490: break;
        case 77: 
          {  
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_BITWISE_XOR_ASSIGN;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 491: break;
        case 82: 
          {  
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_LESS_THAN_OR_EQUAL;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 492: break;
        case 120: 
          {  
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.LITERAL_STRING;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 493: break;
        case 149: 
          {  
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_BITWISE_AND_ASSIGN;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 494: break;
        case 186: 
          {  
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_SHIFT_RIGHT_ASSIGN;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 495: break;
        case 119: 
        case 215: 
        case 216: 
        case 217: 
        case 301: 
          {  
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.ERROR_MALFORMED_UNCLOSED_STRING;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 496: break;
        case 35: 
        case 118: 
        case 214: 
        case 218: 
        case 219: 
        case 299: 
        case 302: 
        case 364: 
        case 408: 
          {  
    /* most of these errors have to be caught down near the end of the file.
     * This way, previous expressions of the same length have precedence.
     * This is really useful for catching anything bad by just allowing it 
     * to slip through the cracks. 
     */ 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.ERROR_UNCLOSED_STRING;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 497: break;
        case 8: 
          {  
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.SEPARATOR_LPAREN;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
     }
        case 498: break;
        case 84: 
          {  
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_GREATER_THAN_OR_EQUAL;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 499: break;
        case 93: 
        case 97: 
        case 99: 
        case 101: 
          {  
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.ERROR_FLOAT;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 500: break;
        case 335: 
          { 
    lastToken = CToken.COMMENT_TRADITIONAL;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
 }
        case 501: break;
        case 477: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_DYNAMIC_CAST;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 502: break;
        case 165: 
        case 262: 
        case 263: 
        case 343: 
        case 344: 
          { 
    nextState = PREPROCESSOR;
	lastToken = CToken.PREPROCESSOR_DIRECTIVE;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
 }
        case 503: break;
        case 481: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_REINTERPRET_CAST;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 504: break;
        case 222: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_INT;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 505: break;
        case 73: 
          { 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_EQUAL;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 506: break;
        case 52: 
          { 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_COLON;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 507: break;
        case 51: 
          { 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.SEPARATOR_COMMA;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 508: break;
        case 6: 
          { 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_ASSIGN;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 509: break;
        case 11: 
          { 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_DIVIDE;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 510: break;
        case 91: 
          { 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.SEPARATOR_ARROW;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 511: break;
        case 125: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_IF;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 512: break;
        case 134: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_DO;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 513: break;
        case 201: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_FOR;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 514: break;
        case 203: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_NEW;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 515: break;
        case 207: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_TRY;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 516: break;
        case 37: 
          { 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_ADD;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 517: break;
        case 27: 
          { 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_MOD;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 518: break;
        case 2: 
        case 56: 
        case 57: 
        case 58: 
        case 60: 
        case 154: 
        case 155: 
          { 
	lastToken = CToken.PREPROCESSOR_DIRECTIVE;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	return(t);
 }
        case 519: break;
        case 25: 
          {  
    lastToken = CToken.WHITE_SPACE;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	return (t);
 }
        case 520: break;
        case 4: 
        case 62: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 166: 
        case 167: 
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 254: 
        case 255: 
        case 256: 
        case 257: 
        case 258: 
        case 259: 
        case 260: 
        case 261: 
        case 265: 
        case 266: 
        case 267: 
        case 268: 
        case 269: 
        case 270: 
        case 271: 
        case 336: 
        case 337: 
        case 338: 
        case 339: 
        case 340: 
        case 341: 
        case 342: 
        case 345: 
        case 346: 
        case 347: 
        case 392: 
        case 393: 
        case 394: 
        case 395: 
        case 396: 
        case 430: 
        case 431: 
          { 
    nextState = PREPROCESSOR;
	lastToken = CToken.ERROR_MALFORMED_PREPROCESSOR_DIRECTIVE;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
 }
        case 521: break;
        case 83: 
          {  
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_SHIFT_LEFT;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 522: break;
        case 85: 
          {  
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_SHIFT_RIGHT;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 523: break;
        case 88: 
          {  
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_LOGICAL_OR;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 524: break;
        case 102: 
          {  
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_MOD_ASSIGN;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 525: break;
        case 122: 
          {  
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_ADD_ASSIGN;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 526: break;
        case 150: 
          {  
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_LOGICAL_AND;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 527: break;
        case 3: 
          {  
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.ERROR_IDENTIFIER;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 528: break;
        case 468: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_PROTECTED;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 529: break;
        case 463: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_NAMESPACE;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 530: break;
        case 462: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_OPERATOR;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 531: break;
        case 461: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_OVERLOAD;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 532: break;
        case 457: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_UNSIGNED;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 533: break;
        case 455: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_CONTINUE;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 534: break;
        case 454: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_VOLATILE;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 535: break;
        case 453: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_TEMPLATE;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 536: break;
        case 452: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_REGISTER;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 537: break;
        case 274: 
          { 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.COMMENT_DOCUMENTATION;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 538: break;
        case 53: 
          { 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_BITWISE_AND;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 539: break;
        case 19: 
          { 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_LOGICAL_NOT;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 540: break;
        case 12: 
          { 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_BITWISE_XOR;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 541: break;
        case 17: 
          { 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_GREATER_THAN;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 542: break;
        case 100: 
        case 193: 
        case 194: 
        case 281: 
          { 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.LITERAL_INTEGER_OCTAL;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 543: break;
        case 300: 
          {  
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.ERROR_MALFORMED_STRING;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 544: break;
        case 74: 
          {  
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_DIVIDE_ASSIGN;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 545: break;
        case 76: 
        case 156: 
        case 174: 
        case 175: 
        case 253: 
        case 272: 
        case 273: 
          {  
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.ERROR_UNCLOSED_COMMENT;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 546: break;
        case 81: 
          {  
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.ERROR_MALFORMED_CHARACTER;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 547: break;
        case 87: 
          {  
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_BITWISE_OR_ASSIGN;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 548: break;
        case 89: 
          {  
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_NOT_EQUAL;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 549: break;
        case 92: 
          {  
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_DECREMENT;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 550: break;
        case 179: 
        case 398: 
          {  
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.LITERAL_CHARACTER;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 551: break;
        case 185: 
          {  
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_SHIFT_LEFT_ASSIGN;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 552: break;
        case 391: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_WHILE;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 553: break;
        case 384: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_SHORT;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 554: break;
        case 372: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_UNION;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 555: break;
        case 371: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_CONST;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 556: break;
        case 369: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_CLASS;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 557: break;
        case 368: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_CATCH;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 558: break;
        case 355: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_FLOAT;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 559: break;
        case 353: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_BREAK;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 560: break;
        case 330: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_GOTO;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 561: break;
        case 320: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_ELSE;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 562: break;
        case 318: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_ENUM;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 563: break;
        case 311: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_LONG;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 564: break;
        case 310: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_CHAR;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 565: break;
        case 306: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_CASE;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 566: break;
        case 297: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_VOID;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 567: break;
        case 294: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_THIS;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 568: break;
        case 286: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_BOOL;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 569: break;
        case 284: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_AUTO;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 570: break;
        case 38: 
          { 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.SEPARATOR_PERIOD;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 571: break;
        case 36: 
          { 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_MULTIPLY;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 572: break;
        case 21: 
          { 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_SUBTRACT;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 573: break;
        case 5: 
        case 55: 
          { 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_QUESTION;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 574: break;
        case 10: 
          { 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.SEPARATOR_RPAREN;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 575: break;
        case 14: 
          { 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.SEPARATOR_LBRACE;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 576: break;
        case 16: 
          { 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.SEPARATOR_RBRACE;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 577: break;
        case 475: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_STATIC_CAST;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 578: break;
        case 470: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_CONST_CAST;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 579: break;
        case 447: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_MUTABLE;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 580: break;
        case 445: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_PRIVATE;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 581: break;
        case 442: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_DEFAULT;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 582: break;
        case 437: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_VIRTUAL;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 583: break;
        case 436: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_TYPEDEF;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 584: break;
        case 426: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_PUBLIC;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 585: break;
        case 423: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_SWITCH;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 586: break;
        case 422: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_SIZEOF;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 587: break;
        case 421: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_SIGNED;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 588: break;
        case 420: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_STRUCT;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 589: break;
        case 419: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_STATIC;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 590: break;
        case 418: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_EXTERN;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 591: break;
        case 416: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_DOUBLE;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 592: break;
        case 415: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_DELETE;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 593: break;
        case 410: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_INLINE;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 594: break;
        case 401: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_RETURN;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 595: break;
        case 399: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_FRIEND;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 596: break;
        case 348: 
          { 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.COMMENT_TRADITIONAL;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 597: break;
        case 50: 
          { 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.SEPARATOR_SEMICOLON;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 598: break;
        case 23: 
        case 24: 
        case 95: 
        case 96: 
        case 189: 
          { 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.LITERAL_INTEGER_DECIMAL;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 599: break;
        case 20: 
          { 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_BITWISE_COMPLIMENT;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 600: break;
        case 9: 
          { 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.SEPARATOR_RBRACKET;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 601: break;
        case 7: 
          { 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.SEPARATOR_LBRACKET;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 602: break;
        case 15: 
          { 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_LESS_THAN;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 603: break;
        case 18: 
          { 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_BITWISE_OR;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 604: break;
        case 98: 
        case 124: 
        case 191: 
        case 192: 
        case 220: 
        case 280: 
          { 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.LITERAL_FLOATING_POINT;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 605: break;
        case 195: 
        case 282: 
        case 283: 
        case 352: 
          { 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.LITERAL_INTEGER_HEXIDECIMAL;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 606: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            return null;
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
