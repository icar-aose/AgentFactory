/*
 * DynamicTreePanel.java
 *
 * Created on 1 novembre 2002, 15.34
 */

package org.af1_0.gui;

import java.awt.*;
import java.awt.event.*;

import javax.swing.*;
import javax.swing.tree.*;
import javax.swing.event.*;

import javax.swing.JPopupMenu;

import org.af1_0.gui.command.command;
import org.af1_0.gui.command.command_factory;
import org.af1_0.entity.entity;

/** Questa classe può essere usata per visualizzare un albero il cui modello associato varia nel tempo.
 * @author Luca (this code is based on an example provided by Richard Stanford)
 */
public class DynamicTreePanel extends javax.swing.JPanel {
    protected DefaultMutableTreeNode rootNode;
    protected DefaultTreeModel treeModel;
    private PopupListener current_poplistner = null;
    
    private command_factory factory = null;

    private command show_entity = null;
    private command edit_entity = null;
    private command add_method = null;
    private command add_attribute = null;
    private command add_task = null;
    
    /** Creates new form DynamicTreePanel */
    public DynamicTreePanel(String root_name) {
        rootNode = new DefaultMutableTreeNode(root_name);
        treeModel = new DefaultTreeModel(rootNode);
        
        initComponents();
    }
    
    public void setSystemString(String name) {
        rootNode.setUserObject(name);
    }
    
    public void setCommandFactory(command_factory a_factory) {
        factory = a_factory;
    }
    
    public void setAgentPopMenu(command show,command edit,command task, command method, command attribute) {
        show_entity = show;
        edit_entity = edit;
        add_method = method;
        add_attribute = attribute;
        add_task = task;
        setPopMenu(AgentPopup);
    }
    
    public void setTaskPopMenu(command edit,command method, command attribute) {
        edit_entity = edit;
        add_method = method;
        add_attribute = attribute;
        setPopMenu(TaskPopup);
    }

    public void setRelationPopMenu(command edit) {
        edit_entity = edit;
        setPopMenu(RelationPopup);
    }

    public void setAttributePopMenu(command edit) {
        edit_entity = edit;
        setPopMenu(AttributePopup);
    }

    public void setMethodPopMenu(command edit) {
        edit_entity = edit;
        setPopMenu(MethodPopup);
    }

    public void setNonePopMenu() {
        setPopMenu(null);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        AgentPopup = new javax.swing.JPopupMenu();
        ShowAgent = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        EditAgent = new javax.swing.JMenuItem();
        AgentTask = new javax.swing.JMenuItem();
        AgentAttribute = new javax.swing.JMenuItem();
        AgentMethod = new javax.swing.JMenuItem();
        TaskPopup = new javax.swing.JPopupMenu();
        EditTask = new javax.swing.JMenuItem();
        TaskAttribute = new javax.swing.JMenuItem();
        TaskMethod = new javax.swing.JMenuItem();
        RelationPopup = new javax.swing.JPopupMenu();
        EditRelation = new javax.swing.JMenuItem();
        AttributePopup = new javax.swing.JPopupMenu();
        EditAttribute = new javax.swing.JMenuItem();
        MethodPopup = new javax.swing.JPopupMenu();
        EditMethod = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        tree = new JTree(treeModel);

        ShowAgent.setText("Show agent");
        ShowAgent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowActionPerformed(evt);
            }
        });

        AgentPopup.add(ShowAgent);
        AgentPopup.add(jSeparator1);
        EditAgent.setText("Edit agent");
        EditAgent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditActionPerformed(evt);
            }
        });

        AgentPopup.add(EditAgent);
        AgentTask.setText("Add task");
        AgentTask.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TaskActionPerformed(evt);
            }
        });

        AgentPopup.add(AgentTask);
        AgentAttribute.setText("Add attribute");
        AgentAttribute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AttributeActionPerformed(evt);
            }
        });

        AgentPopup.add(AgentAttribute);
        AgentMethod.setText("Add method");
        AgentMethod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MethodActionPerformed(evt);
            }
        });

        AgentPopup.add(AgentMethod);
        EditTask.setText("Edit task");
        EditTask.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditActionPerformed(evt);
            }
        });

        TaskPopup.add(EditTask);
        TaskAttribute.setText("Add attribute");
        TaskAttribute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AttributeActionPerformed(evt);
            }
        });

        TaskPopup.add(TaskAttribute);
        TaskMethod.setText("Add method");
        TaskMethod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MethodActionPerformed(evt);
            }
        });

        TaskPopup.add(TaskMethod);
        EditRelation.setText("Edit relation");
        EditRelation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditActionPerformed(evt);
            }
        });

        RelationPopup.add(EditRelation);
        EditAttribute.setText("Edit attribute");
        EditAttribute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditActionPerformed(evt);
            }
        });

        AttributePopup.add(EditAttribute);
        EditMethod.setText("Edit method");
        EditMethod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditActionPerformed(evt);
            }
        });

        MethodPopup.add(EditMethod);

        setLayout(new java.awt.BorderLayout());

        tree.setEditable(true);
        tree.setShowsRootHandles(true);
        tree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                treeValueChanged(evt);
            }
        });

        jScrollPane1.setViewportView(tree);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);

    }//GEN-END:initComponents

    private void TaskActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TaskActionPerformed
        if (add_task != null)
            add_task.execute();
    }//GEN-LAST:event_TaskActionPerformed

    private void MethodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MethodActionPerformed
        if (add_method != null)
            add_method.execute();
    }//GEN-LAST:event_MethodActionPerformed

    private void AttributeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AttributeActionPerformed
        if (add_attribute != null)
            add_attribute.execute();
    }//GEN-LAST:event_AttributeActionPerformed

    private void EditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditActionPerformed
        if (edit_entity != null)
            edit_entity.execute();
    }//GEN-LAST:event_EditActionPerformed

    private void ShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowActionPerformed
        if (show_entity != null)
            show_entity.execute();
    }//GEN-LAST:event_ShowActionPerformed

    private void treeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_treeValueChanged
        Object node = tree.getLastSelectedPathComponent();
        
        if (node != null) {
            factory.createSelectEntity().execute();
        }
    }//GEN-LAST:event_treeValueChanged
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTree tree;
    private javax.swing.JMenuItem TaskMethod;
    private javax.swing.JMenuItem EditAttribute;
    private javax.swing.JPopupMenu AgentPopup;
    private javax.swing.JMenuItem AgentTask;
    private javax.swing.JMenuItem EditAgent;
    private javax.swing.JMenuItem EditMethod;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JMenuItem EditTask;
    private javax.swing.JPopupMenu RelationPopup;
    private javax.swing.JPopupMenu TaskPopup;
    private javax.swing.JMenuItem AgentAttribute;
    private javax.swing.JPopupMenu MethodPopup;
    private javax.swing.JMenuItem EditRelation;
    private javax.swing.JMenuItem AgentMethod;
    private javax.swing.JMenuItem TaskAttribute;
    private javax.swing.JPopupMenu AttributePopup;
    private javax.swing.JMenuItem ShowAgent;
    // End of variables declaration//GEN-END:variables
    
    /** Tramite questo metodo si imposta quale PopMenu deve essere associato al componente.
     * @param popmenu Indica il menu da impostare
     */    
    public void setPopMenu(JPopupMenu popmenu) {
        if (current_poplistner != null)
            tree.removeMouseListener(current_poplistner);

        if (popmenu != null) {
            current_poplistner = new PopupListener(popmenu);
            tree.addMouseListener(current_poplistner);
        }
    }

    // restistuisce il percorso dell'elemento attualmente selezionato
    /** Tramite questo metodo si preleva il path verso il nodo selezionato dall'utente.
     * @return Restituisce un array di oggetti che definiscono i nodi dal root fino a quello selezionato.
     */    
    public Object[] getTreePath() {
        TreePath currentSelection = tree.getSelectionPath();
        if (currentSelection!= null)
            return currentSelection.getPath();
        return null;
    }

    public String getTreePathString() {
        TreePath currentSelection = tree.getSelectionPath();
        String path = null;
        if (currentSelection!= null) {
            Object[] sel = currentSelection.getPath();
            path = new String();
            for (int i=1; i<sel.length; i++)
                if (i==1)
                    path = sel[1].toString();
                else
                    path += "."+sel[i].toString();
        }
        return path;
    }

    public MutableTreeNode getSelectNode() {
        MutableTreeNode node = null;
        TreePath parentPath = tree.getSelectionPath();
        
        node = (MutableTreeNode) parentPath.getLastPathComponent();
        return node;       
    }
    
    /** Remove all nodes except the root node. */
    public void clear() {
        rootNode.removeAllChildren();
        treeModel.reload();
    }
    
    public MutableTreeNode getRoot() {
        return rootNode;
    }
    
    public DefaultTreeModel getTreeModel() {
        return treeModel;
    }
    
    public void insertNodeAtLast(MutableTreeNode newChild, MutableTreeNode parent) {
        treeModel.insertNodeInto(newChild,parent,parent.getChildCount());   
    }
    
    class PopupListener extends MouseAdapter {
        private javax.swing.JPopupMenu popup;
        
        public PopupListener(javax.swing.JPopupMenu menu) {
            popup = menu;
        }
        
        public void mousePressed(MouseEvent e) {
            maybeShowPopup(e);
        }
        
        public void mouseReleased(MouseEvent e) {
            maybeShowPopup(e);
        }
        
        private void maybeShowPopup(MouseEvent e) {
            if (e.isPopupTrigger()) {
                popup.show(e.getComponent(),
                e.getX(), e.getY());
            }
        }
    }
}
