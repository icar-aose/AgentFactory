/*
 * AgentFactoryApplet.java
 *
 * Created on 6 gennaio 2003, 10.45
 */

package org.af1_0.gui;

import java.util.Iterator;
import java.io.*;

import org.af1_0.mas.multi_agent_system;
import org.af1_0.gui.command.*;
import org.af1_0.gui.command.model.*;
import org.af1_0.gui.command.behaviour_wizard.*;
import org.af1_0.gui.command.component_wizard.*;
import org.af1_0.gui.command.service_wizard.*;
import org.af1_0.gui.command.options.*;
import org.af1_0.gui.panel.controls_panel;
import org.af1_0.gui.command.panels.*;
import org.af1_0.entity.*;
import org.af1_0.mas.*;
import org.af1_0.gui.xml.*;

// temp
import org.af1_0.pattern.*;
import org.af1_0.repository.*;

/**
 *
 * @author  Luca
 */
public class AgentFactoryApplet extends javax.swing.JApplet {
    private multi_agent_system current_project;   
    private DynamicTreePanel tree_panel;
    private TreeModelUpdate tree_model_update;
    
    private controls_panel controls;
  
    private command add_new_agent_command;
    private command add_new_relation_command;
    private command apply_component_pattern;
    private command apply_behaviour_pattern;
	private command apply_service_pattern;

    private command refresh_the_model;
    private command new_project;
	private command show_about_box;
    
    /** Creates new form AgentFactoryApplet */
    public AgentFactoryApplet() {
        repository_proxy repository = new repository_proxy("mozart.csai.unipa.it");
        current_project = new multi_agent_system("Jade");
        current_project.setRepository(repository);
        tree_panel = new DynamicTreePanel("System: Jade");
        tree_model_update = new TreeModelUpdate(tree_panel);
        controls = new controls_panel();
        
        initCommands();

        initComponents();
    }
    
    private void initCommands() {
        add_new_agent_command = new insert_agent(controls,current_project,tree_model_update);
        add_new_relation_command = new insert_relation(controls,current_project,tree_model_update);
        
        apply_component_pattern = new component_wizard(controls,current_project,tree_model_update);
        apply_behaviour_pattern = new behaviour_wizard(controls,current_project,tree_model_update);
		apply_service_pattern = new service_wizard(controls,current_project,tree_model_update);
        
        refresh_the_model = new refresh_model(current_project, tree_model_update);
        new_project = new new_project_option(controls,current_project,tree_model_update,tree_panel);
		show_about_box = new show_info_panel(controls);
        
        // command for DynamicTreePanel
        tree_panel.setCommandFactory( new command_factory(current_project,controls,tree_panel,tree_model_update) );
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel2 = tree_panel;
        jPanel1 = controls;
        jMenuBar1 = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        NewMenu = new javax.swing.JMenuItem();
        ImportXmiMenu = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        ExportXmiMenu = new javax.swing.JMenuItem();
        ExportJavaMenu = new javax.swing.JMenuItem();
        RefreshMenu = new javax.swing.JMenuItem();
        EditMasMenu = new javax.swing.JMenu();
        AddAgentMenu = new javax.swing.JMenuItem();
        AddRelationMenu = new javax.swing.JMenuItem();
        PatternMenu = new javax.swing.JMenu();
        ApplyBehaviour = new javax.swing.JMenuItem();
        ApplyComponent = new javax.swing.JMenuItem();
        ApplyService = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        AboutMenu = new javax.swing.JMenuItem();

        jSplitPane1.setDividerLocation(180);
        jSplitPane1.setDividerSize(5);
        jSplitPane1.setLeftComponent(jPanel2);

        jPanel1.setPreferredSize(new java.awt.Dimension(500, 10));
        jSplitPane1.setRightComponent(jPanel1);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        FileMenu.setText("File");
        NewMenu.setText("New Multi Agent System");
        NewMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewMenuActionPerformed(evt);
            }
        });

        FileMenu.add(NewMenu);
        ImportXmiMenu.setText("Import from XMI");
        ImportXmiMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ImportXmiMenuActionPerformed(evt);
            }
        });

        FileMenu.add(ImportXmiMenu);
        FileMenu.add(jSeparator1);
        ExportXmiMenu.setText("Export to XMI");
        ExportXmiMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportXmiMenuActionPerformed(evt);
            }
        });

        FileMenu.add(ExportXmiMenu);
        ExportJavaMenu.setText("Export to java");
        ExportJavaMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportJavaMenuActionPerformed(evt);
            }
        });

        FileMenu.add(ExportJavaMenu);
        RefreshMenu.setText("RefreshModel");
        RefreshMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshMenuActionPerformed(evt);
            }
        });

        FileMenu.add(RefreshMenu);
        jMenuBar1.add(FileMenu);
        EditMasMenu.setText("Edit");
        AddAgentMenu.setText("Add new agent");
        AddAgentMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddAgentMenuActionPerformed(evt);
            }
        });

        EditMasMenu.add(AddAgentMenu);
        AddRelationMenu.setText("Add new relation");
        AddRelationMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddRelationMenuActionPerformed(evt);
            }
        });

        EditMasMenu.add(AddRelationMenu);
        jMenuBar1.add(EditMasMenu);
        PatternMenu.setText("Pattern");
        ApplyBehaviour.setText("Behaviour pattern Wizard");
        ApplyBehaviour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ApplyBehaviourActionPerformed(evt);
            }
        });

        PatternMenu.add(ApplyBehaviour);
        ApplyComponent.setText("Component pattern Wizard");
        ApplyComponent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ApplyComponentActionPerformed(evt);
            }
        });

        PatternMenu.add(ApplyComponent);
        ApplyService.setText("Service pattern Wizard");
        ApplyService.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ApplyServiceActionPerformed(evt);
            }
        });

        PatternMenu.add(ApplyService);
        jMenuBar1.add(PatternMenu);
        jMenu1.setText("?");
        AboutMenu.setText("About AgentFactory");
        AboutMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AboutMenuActionPerformed(evt);
            }
        });

        jMenu1.add(AboutMenu);
        jMenuBar1.add(jMenu1);
        setJMenuBar(jMenuBar1);

    }//GEN-END:initComponents

	private void AboutMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AboutMenuActionPerformed
		show_about_box.execute();
	}//GEN-LAST:event_AboutMenuActionPerformed

    private void ApplyServiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ApplyServiceActionPerformed
		apply_service_pattern.execute();
    }//GEN-LAST:event_ApplyServiceActionPerformed

    private void ApplyComponentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ApplyComponentActionPerformed
        apply_component_pattern.execute();
    }//GEN-LAST:event_ApplyComponentActionPerformed

    private void ApplyBehaviourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ApplyBehaviourActionPerformed
        apply_behaviour_pattern.execute();
    }//GEN-LAST:event_ApplyBehaviourActionPerformed

    private void AddRelationMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddRelationMenuActionPerformed
        add_new_relation_command.execute();
    }//GEN-LAST:event_AddRelationMenuActionPerformed

    private void AddAgentMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddAgentMenuActionPerformed
        add_new_agent_command.execute();
    }//GEN-LAST:event_AddAgentMenuActionPerformed

    private void RefreshMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshMenuActionPerformed
        refresh_the_model.execute();
    }//GEN-LAST:event_RefreshMenuActionPerformed

    private void ExportJavaMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExportJavaMenuActionPerformed
		javax.swing.JFileChooser chooser = new javax.swing.JFileChooser();
		chooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
		int returnVal = chooser.showSaveDialog(this);
		if(returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
			try {
				java.io.File dir = chooser.getSelectedFile();
				if (dir.isDirectory() && dir.exists()) {
					entity_search search = new entity_search(current_project);
					Iterator it = search.getAgentList().iterator();
					while( it.hasNext() ) {
						java_class agent = (java_class) it.next();
						agent_to_java transf = new agent_to_java(agent,current_project);
						String java_code = transf.getJava();
					
						File agent_file = new File(dir,agent.getName()+".java");
						java.io.FileWriter out = new java.io.FileWriter(agent_file);
						out.write(java_code);
						out.close();
					}
				}
			} catch (java.io.IOException e) {
				e.printStackTrace();
			}
		}
    }//GEN-LAST:event_ExportJavaMenuActionPerformed

    private void ExportXmiMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExportXmiMenuActionPerformed
		javax.swing.JFileChooser chooser = new javax.swing.JFileChooser();
		int returnVal = chooser.showSaveDialog(this);
		if(returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
			//System.out.println("You chose to open this file: " +
			try {
				java.io.File myfile = chooser.getSelectedFile();
				java.io.FileWriter out = new java.io.FileWriter(myfile);
				mas_to_xmi transf = new mas_to_xmi(current_project);
				out.write(transf.getXmi());
				out.close();
			} catch (java.io.IOException e) {
				e.printStackTrace();
			}
		}
    }//GEN-LAST:event_ExportXmiMenuActionPerformed

    private void ImportXmiMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImportXmiMenuActionPerformed
		javax.swing.JFileChooser chooser = new javax.swing.JFileChooser();
		int returnVal = chooser.showOpenDialog(this);
		if(returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
			try {
				java.io.File myfile = chooser.getSelectedFile();
				java.io.BufferedReader in = new java.io.BufferedReader(new FileReader(myfile));
				StringBuffer xmi = new StringBuffer();
				while (in.ready()) {
					xmi.append( in.readLine() );
				}
				in.close();

				mas_from_xmi model = new mas_from_xmi(current_project.getAgentPlatform(),xmi.toString());			
				
				current_project.merge(model);
				refresh_the_model.execute();
			} catch (java.io.IOException e) {
				e.printStackTrace();
			}
		}
    }//GEN-LAST:event_ImportXmiMenuActionPerformed

    private void NewMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewMenuActionPerformed
        new_project.execute();
    }//GEN-LAST:event_NewMenuActionPerformed

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem RefreshMenu;
    private javax.swing.JMenuItem ApplyComponent;
    private javax.swing.JMenu FileMenu;
    private javax.swing.JMenuItem ImportXmiMenu;
    private javax.swing.JMenuItem NewMenu;
    private javax.swing.JMenuItem AddRelationMenu;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JMenu PatternMenu;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JMenuItem ApplyBehaviour;
    private javax.swing.JMenuItem ExportJavaMenu;
    private javax.swing.JMenuItem ApplyService;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JMenuItem AddAgentMenu;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuItem AboutMenu;
    private javax.swing.JMenuItem ExportXmiMenu;
    private javax.swing.JMenu EditMasMenu;
    private javax.swing.JMenuBar jMenuBar1;
    // End of variables declaration//GEN-END:variables
    
}
